'use strict';var random={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,
getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_random__ from"./random.js";__nest__(random,"",__module_random__);import{os}from"./pyjsdl.pylib.js";import*as pygame from"./pyjsdl.js";var __name__="__main__";export var platform=null;if(platform===null){if(!hasattr(random,"randrange"))random.randrange=
function __lambda__(i,f){return random.choice(range(i,f))};var platform="js"}export var load_images=true;if(!hasattr(random,"randrange"))random.randrange=function __lambda__(i,f){return random.choice(range(i,f))};export var Matrix=__class__("Matrix",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,x,y,screen,background){var __left0__=tuple([x,y]);self.x=__left0__[0];self.y=__left0__[1];self.screen=screen;self.background=background;self.clock=pygame.time.Clock();self.level=
2;self.speed=2;self.mode=dict({"Serpent1":"AI","Serpent2":"AI"});self.ctrl=dict({"Pad":"Serpent1","Key1":"Serpent1","Key2":null});self.points=dict({"Serpent1":0,"Serpent2":0});self.match=0;self.auto=true;self.controls=dict({});self.dirn=dict({});self.dirn["U"]=dict({"U":"U","D":"D","L":"L","R":"R"});self.dirn["D"]=dict({"U":"D","D":"U","L":"R","R":"L"});self.dirn["L"]=dict({"U":"R","D":"L","L":"D","R":"U"});self.dirn["R"]=dict({"U":"L","D":"R","L":"U","R":"D"});self.serpent_control=self.serpent_control_scr;
self.serpent=null;self.treat=null;self.treat_obj=null;self.treat_display=false;self.treat_event=pygame.USEREVENT;self.update_rect=[];self.clear_screen();self.active=false})},get start(){return __get__(this,function(self){self.treat=pygame.sprite.RenderUpdates();self.serpent=dict({"Serpent1":null,"Serpent2":null});for(var serpent of self.mode.py_keys())if(__in__(self.mode[serpent],tuple(["USER","AI"])))self.serpent_initiate(serpent);else self.match=0;self.auto=!__in__("USER",self.mode.py_values());
self.clear_screen();for(var serpent of self.points.py_keys())self.points[serpent]=0;self.treat_add();self.active=true})},get clear_screen(){return __get__(this,function(self){self.screen.blit(self.background,tuple([0,0]));self.draw_edge();pygame.display.flip()})},get draw_edge(){return __get__(this,function(self){self.edges=[];for(var rect of[tuple([0,0,self.x,5]),tuple([0,self.y-5,self.x,5]),tuple([0,0,5,self.y]),tuple([self.x-5,0,5,self.y-5])]){var edge_rect=pygame.Rect(rect);self.edges.append(pygame.draw.rect(self.screen,
tuple([43,50,58]),edge_rect,0));self.update_rect.append(edge_rect)}})},get update_screen(){return __get__(this,function(self){if(self.treat){self.treat.py_clear(self.screen,self.background);self.update_rect.extend(self.treat.draw(self.screen))}for(var serpent of self.serpent.py_keys()){if(!self.serpent[serpent])continue;self.serpent[serpent].segments.py_clear(self.screen,self.background);self.update_rect.extend(self.serpent[serpent].segments.draw(self.screen))}pygame.display.py_update(self.update_rect);
self.update_rect=[]})},get set_active(){return __get__(this,function(self,state,pause){if(typeof state=="undefined"||state!=null&&state.hasOwnProperty("__kwargtrans__"))var state=null;if(typeof pause=="undefined"||pause!=null&&pause.hasOwnProperty("__kwargtrans__"))var pause=false;if(state===null)self.active=!self.active;else self.active=state;if(self.active)if(!pause)self.start()})},get set_mode(){return __get__(this,function(self,serpent,mode){self.mode[serpent]=mode})},get set_control_mode(){return __get__(this,
function(self,mode){if(mode=="SCR")self.serpent_control=self.serpent_control_scr;else if(mode=="USR")self.serpent_control=self.serpent_control_usr})},get set_difficulty(){return __get__(this,function(self,level){self.level=level;self.speed=dict({1:1,2:2,3:5,4:10})[level]})},get set_control(){return __get__(this,function(self,serpent,control){for(var ctr of self.ctrl.py_keys())if(self.ctrl[ctr]==serpent)self.ctrl[ctr]=null;if(control=="Pad/Key1"){self.ctrl["Pad"]=serpent;self.ctrl["Key1"]=serpent}else if(control!=
"-")self.ctrl[control]=serpent})},get serpent_control_scr(){return __get__(this,function(self,direction,ctrl){if(typeof ctrl=="undefined"||ctrl!=null&&ctrl.hasOwnProperty("__kwargtrans__"))var ctrl="Pad";try{self.serpent[self.ctrl[ctrl]].control(direction)}catch(__except0__){}})},get serpent_control_usr(){return __get__(this,function(self,direction,ctrl){if(typeof ctrl=="undefined"||ctrl!=null&&ctrl.hasOwnProperty("__kwargtrans__"))var ctrl="Pad";try{var dirn=self.serpent[self.ctrl[ctrl]].direction;
var direction=self.dirn[dirn][direction];self.serpent[self.ctrl[ctrl]].control(direction)}catch(__except0__){}})},get serpent_initiate(){return __get__(this,function(self,identity){if(identity=="Serpent1")self.serpent["Serpent1"]=Serpent(self,Math.floor(self.x/2)+50,Math.floor(self.y/3)+30,identity,self.speed,self.mode["Serpent1"]);else self.serpent["Serpent2"]=Serpent(self,Math.floor(self.x/2)-50,Math.floor(self.y/3)+30,identity,self.speed,self.mode["Serpent2"])})},get treat_add(){return __get__(this,
function(self){self.treat.empty();self.treat.add(Treat(self));self.treat_obj=self.treat.sprites()[0];self.treat_display=true;pygame.time.set_timer(self.treat_event,0)})},get treat_reset(){return __get__(this,function(self){self.treat.empty();self.treat_obj=null;self.treat_display=true;var time=random.randrange(50,1E3);pygame.time.set_timer(self.treat_event,time)})},get stop(){return __get__(this,function(self){self.active=false;pygame.time.set_timer(self.treat_event,0)})},get py_update(){return __get__(this,
function(self){if(self.active){if(self.treat_obj)self.treat_obj.py_update();if(self.treat_display){self.treat.py_clear(self.screen,self.background);self.update_rect.extend(self.treat.draw(self.screen));self.treat_display=false}for(var serpent of self.serpent.py_keys()){if(!self.serpent[serpent])continue;if(!self.serpent[serpent].alive)if(!self.match&&!self.auto)self.active=false;else{self.serpent_initiate(self.serpent[serpent].identity);self.draw_edge()}self.serpent[serpent].py_update();self.serpent[serpent].segments.py_clear(self.screen,
self.background);self.update_rect.extend(self.serpent[serpent].segments.draw(self.screen))}}})}});export var Serpent=__class__("Serpent",[object],{__module__:__name__,_segment_spares:dict({"Serpent1":[],"Serpent2":[]}),get __init__(){return __get__(this,function(self,matrix,x,y,identity,speed,mode){self.matrix=matrix;self.identity=identity;self.mode=mode;var __left0__=tuple([x,y]);self.x=__left0__[0];self.y=__left0__[1];self.speed=speed;self.DIR=dict({"U":tuple([0,-1]),"D":tuple([0,1]),"L":tuple([-1,
0]),"R":tuple([1,0])});self.DEG=dict({"U":0,"D":180,"L":90,"R":-90});if(self.identity=="Serpent1")self.direction="R";else self.direction="L";self.new_direction=null;var __left0__=tuple([0,0,0]);self.step=__left0__[0];self.growing=__left0__[1];self.rate=__left0__[2];self.segments=pygame.sprite.RenderUpdates();self.segment_spares=self._segment_spares[self.identity];self.serpent_body=dict({});self.grow(self.x,self.y,self.DIR[self.direction]);self.serpent_body[0].image=self.serpent_body[0].images[self.identity+
"_head"][self.direction];self.scan_rect=pygame.sprite.Sprite();self.scan_rect.rect=pygame.Rect(0,0,10,10);self.scan_detect=false;self.pause=20;self.active=true;self.alive=true})},get grow(){return __get__(this,function(self,x,y,direction,number){if(typeof number=="undefined"||number!=null&&number.hasOwnProperty("__kwargtrans__"))var number=5;for(var num=0;num<number*10;num+=10){if(len(self.segment_spares)==0)self.segment_spares.append(Segment(self.identity,tuple([0,0])));var segment=self.segment_spares.py_pop();
var __left0__=tuple([x-direction[0]*num,y-direction[1]*num]);segment.x=__left0__[0];segment.y=__left0__[1];var __left0__=tuple([segment.x,segment.y]);segment.x_pre=__left0__[0];segment.y_pre=__left0__[1];segment.rect.center=tuple([segment.x,segment.y]);segment.direction=direction;segment.speed=self.speed;self.segments.add(segment);self.serpent_body[len(self.serpent_body)]=segment}})},get control(){return __get__(this,function(self,direction){for(var dirn of tuple([tuple(["L","R"]),tuple(["U","D"])]))if(__in__(direction,
dirn)&&!__in__(self.direction,dirn)){self.new_direction=direction;self.last_move=direction}})},get move(){return __get__(this,function(self){if(self.mode=="AI")self.move_auto();self.step++;if(self.step>=10/self.speed){for(var i=len(self.serpent_body)-1;i>0;i--)self.serpent_body[i].direction=self.serpent_body[i-1].direction;if(self.new_direction){self.direction=self.new_direction;self.serpent_body[0].direction=self.DIR[self.direction];self.serpent_body[0].image=self.serpent_body[0].images[self.identity+
"_head"][self.direction];self.new_direction=null}self.step=0}self.segments.py_update()})},get move_auto(){return __get__(this,function(self){var collide=function(direction){var direction=self.DIR[direction];self.scan_rect.rect.x=self.serpent_body[0].x+direction[0]*10-Math.floor(self.scan_rect.rect.width/2);self.scan_rect.rect.y=self.serpent_body[0].y+direction[1]*10-Math.floor(self.scan_rect.rect.height/2);var collide=false;for(var serpent of self.matrix.serpent.py_keys()){if(!self.matrix.serpent[serpent])continue;
if(pygame.sprite.spritecollideany(self.scan_rect,self.matrix.serpent[serpent].segments)){var collide=true;return collide}}if(self.scan_rect.rect.collidelist(self.matrix.edges)!=-1){var collide=true;return collide}return collide};var treat=self.matrix.treat_obj;if(treat&&!self.new_direction){var __left0__=tuple([self.serpent_body[0].x,self.serpent_body[0].y]);var x=__left0__[0];var y=__left0__[1];if(x<=treat.x&&y<=treat.y)var direct=tuple(["R","D"]);else if(x<=treat.x&&y>=treat.y)var direct=tuple(["R",
"U"]);else if(x>=treat.x&&y<=treat.y)var direct=tuple(["L","D"]);else if(x>=treat.x&&y>=treat.y)var direct=tuple(["L","U"]);if(!__in__(self.direction,direct)){var new_direction=[];for(var direction of direct)if(!collide(direction))new_direction.append(direction);if(new_direction)self.control(random.choice(new_direction))}}if(collide(self.direction)){self.new_direction=null;var new_direction=[];if(__in__(self.direction,tuple(["U","D"])))for(var direction of tuple(["L","R"])){if(!collide(direction))new_direction.append(direction)}else if(__in__(self.direction,
tuple(["L","R"])))for(var direction of tuple(["U","D"]))if(!collide(direction))new_direction.append(direction);if(new_direction)self.control(random.choice(new_direction));self.scan_detect=true}else self.scan_detect=false})},get growth(){return __get__(this,function(self){if(len(pygame.sprite.spritecollide(self.serpent_body[0],self.matrix.treat,false,pygame.sprite.collide_mask))!=0){var points=0;var treat=self.matrix.treat.sprites()[0];if(treat.identity=="Food")if(self.growing>=0)self.growing+=5;else points+=
5;else if(treat.identity=="Bonus"){if(len(self.serpent_body)>5&&self.growing>=0){self.growing=-(len(self.serpent_body)-5);self.rate=0}points+=10}if(points)self.set_points(points);self.matrix.treat_reset()}if(self.growing){self.rate++;if(self.rate>10/self.speed){var points=0;if(self.growing>0){var tail=self.serpent_body[len(self.serpent_body)-1];self.grow(tail.x-tail.direction[0]*10,tail.y-tail.direction[1]*10,tail.direction,1);self.growing--;points++}else{var tail=len(self.serpent_body)-1;self.segment_spares.append(self.serpent_body[tail]);
self.segments.remove(self.serpent_body[tail]);delete self.serpent_body[tail];self.growing++;points++}self.rate=0;if(points)self.set_points(points)}}})},get set_points(){return __get__(this,function(self,points){self.matrix.points[self.identity]+=points;if(self.matrix.match&&!self.matrix.auto)if(self.matrix.points[self.identity]>=self.matrix.match&&!self.growing)self.matrix.set_active(false)})},get collision(){return __get__(this,function(self){if(self.mode=="AI"&&!self.scan_detect)return false;for(var serpent of self.matrix.serpent.py_keys()){if(!self.matrix.serpent[serpent])continue;
for(var segment of pygame.sprite.spritecollide(self.serpent_body[0],self.matrix.serpent[serpent].segments,false))if(!__in__(segment,tuple([self.serpent_body[0],self.serpent_body[1]])))return true}if(self.serpent_body[0].rect.collidelist(self.matrix.edges)!=-1)return true;return false})},get py_update(){return __get__(this,function(self){if(self.active){self.move();self.growth();self.active=!self.collision();if(!self.active){self.serpent_body[0].image=self.serpent_body[0].images[self.identity+"_ko"][self.direction];
if(self.matrix.match||self.matrix.auto)if(len(self.serpent_body)>5){var penalty=5+Math.floor(len(self.serpent_body)/5);if(self.matrix.points[self.identity]-penalty<0)var penalty=self.matrix.points[self.identity];self.set_points(-penalty)}}}else if(!self.matrix.match&&!self.matrix.auto)self.alive=false;else{self.pause--;if(!self.pause){for(var segment of self.segments.sprites())if(segment!=self.serpent_body[0])self.segment_spares.append(segment);self.segments.empty();self.alive=false}}})}});export var Segment=
__class__("Segment",[pygame.sprite.Sprite],{__module__:__name__,images:null,mask:null,get __init__(){return __get__(this,function(self,serpent,position,direction,speed){if(typeof direction=="undefined"||direction!=null&&direction.hasOwnProperty("__kwargtrans__"))var direction=null;if(typeof speed=="undefined"||speed!=null&&speed.hasOwnProperty("__kwargtrans__"))var speed=0;pygame.sprite.Sprite.__init__(self);self.py_metatype=dict({"Serpent1":tuple([0,0,255]),"Serpent2":tuple([255,0,0])});if(!Segment.images){Segment.images=
dict({});for(var species of tuple(["Serpent1","Serpent2"])){if(load_images){var path="/apps/pyjsdl-ts/data";var image=dict({"Serpent1":"segment1.png","Serpent2":"segment2.png"})[species];var image_path=os.path.join(path,image);Segment.images[species]=pygame.image.load(image_path)}else{Segment.images[species]=pygame.Surface(tuple([10,10]));pygame.draw.circle(Segment.images[species],self.py_metatype[species],tuple([5,5]),6,0);Segment.images[species].set_colorkey(tuple([0,0,0]))}var segment_head=Segment.images[species].copy();
pygame.draw.line(segment_head,tuple([0,255,0]),tuple([2,2]),tuple([0,5]),3);pygame.draw.line(segment_head,tuple([0,255,0]),tuple([7,2]),tuple([9,5]),3);var segment_ko=Segment.images[species].copy();pygame.draw.circle(segment_ko,tuple([0,255,0]),tuple([2,3]),2,1);pygame.draw.circle(segment_ko,tuple([0,255,0]),tuple([8,3]),2,1);Segment.images[species+"_head"]=dict({});Segment.images[species+"_ko"]=dict({});var deg=dict({"U":0,"D":180,"L":90,"R":-90});for(var dirn of tuple(["U","D","L","R"])){Segment.images[species+
"_head"][dirn]=pygame.transform.rotate(segment_head,deg[dirn]);Segment.images[species+"_ko"][dirn]=pygame.transform.rotate(segment_ko,deg[dirn])}}Segment.mask=pygame.mask.from_surface(Segment.images["Serpent1"])}var __left0__=position;self.x=__left0__[0];self.y=__left0__[1];self.direction=direction;self.speed=speed;self.image=Segment.images[serpent];self.rect=self.image.get_rect(__kwargtrans__({center:tuple([self.x,self.y])}));var __left0__=tuple([self.x,self.y]);self.x_pre=__left0__[0];self.y_pre=
__left0__[1];self.mask=Segment.mask})},get py_update(){return __get__(this,function(self){self.x+=self.direction[0]*self.speed;self.y+=self.direction[1]*self.speed;self.rect.move_ip(self.x-self.x_pre,self.y-self.y_pre);self.x_pre=self.x;self.y_pre=self.y})}});export var Treat=__class__("Treat",[pygame.sprite.Sprite],{__module__:__name__,images:null,mask:null,get __init__(){return __get__(this,function(self,matrix){pygame.sprite.Sprite.__init__(self);self.matrix=matrix;if(!Treat.images){Treat.images=
dict({});Treat.mask=dict({});Treat.images["Food"]=pygame.Surface(tuple([15,15]));pygame.draw.circle(Treat.images["Food"],tuple([0,255,0]),tuple([7,7]),5,0);Treat.images["Food"].set_colorkey(tuple([0,0,0]));Treat.images["Bonus"]=pygame.Surface(tuple([15,15]));pygame.draw.circle(Treat.images["Bonus"],tuple([255,0,0]),tuple([7,10]),5,0);pygame.draw.arc(Treat.images["Bonus"],tuple([0,255,0]),tuple([-7,0,15,15]),0,1,1);Treat.images["Bonus"].set_colorkey(tuple([0,0,0]));Treat.mask["Food"]=pygame.mask.from_surface(Treat.images["Food"]);
Treat.mask["Bonus"]=pygame.mask.from_surface(Treat.images["Bonus"])}var placed=false;while(!placed){var __left0__=tuple([random.randrange(20,self.matrix.x-20),random.randrange(20,self.matrix.y-20)]);var x=__left0__[0];var y=__left0__[1];var __left0__=tuple([x,y]);self.x=__left0__[0];self.y=__left0__[1];if(random.random()>.1+self.matrix.clock.get_time()/300){self.identity="Food";self.duration=random.randrange(800,2E3)}else{self.identity="Bonus";self.duration=random.randrange(400,800)}self.duration=
int(self.duration/self.matrix.level);self.image=Treat.images[self.identity];self.rect=self.image.get_rect(__kwargtrans__({center:tuple([x,y])}));self.mask=Treat.mask[self.identity];var disrupt=false;for(var serpent of self.matrix.serpent.py_keys()){if(!self.matrix.serpent[serpent])continue;if(pygame.sprite.spritecollideany(self,self.matrix.serpent[serpent].segments)){var disrupt=true;break}}if(!disrupt)var placed=true}})},get py_update(){return __get__(this,function(self){self.duration--;if(!self.duration)self.matrix.treat_reset()})}});
export var Control=__class__("Control",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,matrix){self.matrix=matrix;pygame.font.init();var font=pygame.font.get_default_font();self.font=pygame.font.Font(font,24);self.font2=pygame.font.Font(font,14);self.loc=dict({1:tuple([0,0,0]),2:tuple([-24,14,0]),3:tuple([-38,0,28])});self.matrix_start=false;self.quit_request=false;pygame.event.set_blocked(pygame.MOUSEMOTION);self.quit=false;self.pause=true;self.pause_program("Serpent Duel",
"Click to run/pause","[r]estart [p]ause [q]uit")})},get pause_program(){return __get__(this,function(self,text1,text2,text3){if(typeof text2=="undefined"||text2!=null&&text2.hasOwnProperty("__kwargtrans__"))var text2=null;if(typeof text3=="undefined"||text3!=null&&text3.hasOwnProperty("__kwargtrans__"))var text3=null;var loc=self.loc[sum(function(){var __accu0__=[];for(var text of tuple([text1,text2,text3]))__accu0__.append(bool(text));return __accu0__}())];self.matrix.screen.fill(tuple([0,0,0]));
var text=self.font.render(text1,true,tuple([100,100,100]));var size=self.font.size(text1);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.x/2)-Math.floor(size[0]/2),Math.floor(self.matrix.y/2)-Math.floor(size[1]/2)+loc[0]]));if(text2){var text=self.font2.render(text2,true,tuple([100,100,100]));var size=self.font2.size(text2);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.x/2)-Math.floor(size[0]/2),Math.floor(self.matrix.y/2)-Math.floor(size[1]/2)+loc[1]]))}if(text3){var text=
self.font2.render(text3,true,tuple([100,100,100]));var size=self.font2.size(text3);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.x/2)-Math.floor(size[0]/2),Math.floor(self.matrix.y/2)-Math.floor(size[1]/2)+loc[2]]))}pygame.display.flip();self.matrix.active=false})},get matrix_control(){return __get__(this,function(self){if(!self.pause){self.pause_program("Serpent Duel","Click to run/pause","[r]estart [p]ause [q]uit");self.pause=true}else{if(self.matrix_start){self.matrix.clear_screen();
self.matrix.update_screen();self.matrix.active=true}else{self.matrix.start();self.matrix_start=true}self.quit_request=false;self.pause=false}})},get check_control(){return __get__(this,function(self){for(var event of pygame.event.py_get())if(event.py_metatype==pygame.MOUSEBUTTONDOWN){if(event.button==1)self.matrix_control()}else if(event.py_metatype==pygame.KEYDOWN)if(event.key==pygame.K_p)self.matrix_control();else if(event.key==pygame.K_r){self.pause=false;self.quit_request=false;self.matrix.start()}else if(event.key==
pygame.K_q){self.pause_program("Serpent Duel","Quit (y/n)?");self.pause=true;self.quit_request=true}else{if(__in__(event.key,tuple([pygame.K_y,pygame.K_n])))if(self.quit_request)if(event.key==pygame.K_n)self.matrix_control();else{self.matrix.screen.fill(tuple([0,0,0]));pygame.display.flip();pygame.time.delay(10);pygame.quit();self.quit=true}}else if(event.py_metatype==self.matrix.treat_event)self.matrix.treat_add();else if(event.py_metatype==pygame.QUIT)self.quit=true;return self.quit})},get py_update(){return __get__(this,
function(self){var quit=self.check_control();if(self.pause)pygame.time.wait(1E3);return quit})}});export var setup=function(x,y,screen){if(typeof x=="undefined"||x!=null&&x.hasOwnProperty("__kwargtrans__"))var x=500;if(typeof y=="undefined"||y!=null&&y.hasOwnProperty("__kwargtrans__"))var y=500;if(typeof screen=="undefined"||screen!=null&&screen.hasOwnProperty("__kwargtrans__"))var screen=null;pygame.init();pygame.display.set_caption("Serpent Duel");if(!screen)var screen=pygame.display.set_mode(tuple([x,
y]));var background=pygame.Surface(tuple([x,y]));background.fill(tuple([50,50,50]));for(var line=0;line<300;line+=25)pygame.draw.line(background,tuple([43,50,58]),tuple([0,line]),tuple([400,line]),1);for(var line=0;line<400;line+=25)pygame.draw.line(background,tuple([43,50,58]),tuple([line,0]),tuple([line,300]),1);var matrix=Matrix(x,y,screen,background);var control=Control(matrix);return tuple([matrix,control])};export var program_exec=function(matrix,control){matrix.update_rect.__setslice__(0,null,
null,[]);matrix.py_update();pygame.display.py_update(matrix.update_rect);matrix.clock.tick(80);var quit=control.py_update();return quit};export var run=function(){program_exec(matrix,control)};var __left0__=tuple([null,null]);export var matrix=__left0__[0];export var control=__left0__[1];export var main=function(){var __left0__=setup(400,300);matrix=__left0__[0];control=__left0__[1];if(load_images){var images=["/apps/pyjsdl-ts/data/segment1.png","/apps/pyjsdl-ts/data/segment2.png"];pygame.display.setup(run,images)}else pygame.display.setup(run)};
export var main2=function(){var __left0__=setup(400,300);var matrix=__left0__[0];var control=__left0__[1];var quit=false;while(!quit)var quit=program_exec(matrix,control)};if(__name__=="__main__")if(platform=="js")main();else if(platform=="pc")main2();

//# sourceMappingURL=serpentduel.map
