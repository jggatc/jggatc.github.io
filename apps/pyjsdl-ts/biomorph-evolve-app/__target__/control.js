'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as pg from"./pyjsdl.js";var __name__="control";export var platform=null;if(platform===null)var platform="js";export var Color=pg.Color;export var App=__class__("App",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,fn){self._fn=
fn;self.quit=false;if(__in__(platform,tuple(["pc","jvm"]))){self.run=self.run_pc;self.set_function=self.set_function_pc}else if(platform=="js"){self.run=self.run_js;self.set_function=self.set_function_js}})},get set_function_pc(){return __get__(this,function(self,fn){self._fn=fn})},get set_function_js(){return __get__(this,function(self,fn){self._fn=fn;pg.set_callback(self._fn)})},get run_pc(){return __get__(this,function(self){while(!self.quit)self._fn()})},get run_js(){return __get__(this,function(self){pg.set_callback(self._fn)})},
get terminate(){return __get__(this,function(self){self.quit=true;pg.quit()})}});export var Control=__class__("Control",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,matrix){self.matrix=matrix;self.clock=pg.time.Clock();pg.event.set_blocked(pg.MOUSEMOTION);self.waiting=false;var __left0__=self.set_cursor();var pointer_cursor=__left0__[0];var wait_cursor=__left0__[1];self.cursor=dict({false:pointer_cursor,true:wait_cursor});self.set_wait(false);if(platform=="js"){var handler=
TouchHandler();pg.env.event.touchlistener.add_callback(handler)}self.quit=false})},get check_control(){return __get__(this,function(self){if(!pg.event.peek())return self.quit;for(var event of pg.event.py_get())if(event.py_metatype==pg.KEYDOWN)if(event.key==pg.K_r)self.matrix.restart();else{if(event.key==pg.K_ESCAPE)self.quit=true}else if(event.py_metatype==pg.MOUSEBUTTONDOWN)if(event.button==1){if(!self.waiting){self.matrix.biomorph_select(event.pos);if(pg.key.get_mods()&pg.KMOD_SHIFT)self.matrix.repeat=
true}}else{if(event.button==3)if(!self.waiting)if(pg.key.get_mods()&pg.KMOD_SHIFT)self.matrix.restart()}else if(event.py_metatype==pg.MOUSEBUTTONUP){if(event.button==1)if(self.matrix.repeat)self.matrix.repeat=false}else if(event.py_metatype==pg.ACTIVEEVENT){if(event.state==2)self.matrix.refresh()}else if(event.py_metatype==pg.QUIT)self.quit=true;return self.quit})},get set_cursor(){return __get__(this,function(self){if(platform=="pc"){var pointer_cursor_strings=tuple(["                        ",".                       ",

"     .XXX.              ","      ...               ","                        "]);var wait_cursor_strings=tuple(["                        ","                        ","     ..............     ","    .XXXXXXXXXXXXXX.    ","    .X            X.    ","     .X..........X.     ","      .X........X.      ","       .X......X.       ","        .X....X.        ","         .X..X.         ","          .XX.          ","          .XX.          ","          .XX.          ","          .XX.          ","         .X .X.         ",
"        .X .  X.        ","       .X   .  X.       ","      .X   .    X.      ","     .X..........X.     ","    .X............X.    ","    .XXXXXXXXXXXXXX.    ","     ..............     ","                        ","                        "]);var __left0__=pg.cursors.compile(pointer_cursor_strings,"X",".");var curs=__left0__[0];var mask=__left0__[1];var pointer_cursor=tuple([tuple([24,24]),tuple([0,1]),curs,mask]);var __left0__=pg.cursors.compile(wait_cursor_strings,"X",".");var curs=__left0__[0];
var mask=__left0__[1];var wait_cursor=tuple([tuple([24,24]),tuple([4,2]),curs,mask])}else if(platform=="jvm"){var pointer_cursor=pg.cursors.HAND_CURSOR;var wait_cursor=pg.cursors.WAIT_CURSOR}else if(platform=="js"){var pointer_cursor="pointer";var wait_cursor="wait"}return tuple([pointer_cursor,wait_cursor])})},get set_wait(){return __get__(this,function(self,setting){self.waiting=setting;if(platform=="pc")pg.mouse.set_cursor(...self.cursor[self.waiting]);else pg.mouse.set_cursor(self.cursor[self.waiting]);
return null})},get py_update(){return __get__(this,function(self){var quit=self.check_control();self.clock.tick(60);return quit})}});export var TouchHandler=__class__("TouchHandler",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self.pos=dict({"x":0,"y":0})})},get onTouchStart(){return __get__(this,function(self,event){var touch=event.touches.item(0);var r=pg.env.canvas.getElement().getBoundingClientRect();var x=touch.clientX-round(r.left);var y=touch.clientY-round(r.top);
var evt=pg.event.Event(pg.MOUSEBUTTONDOWN,dict({"button":1,"pos":tuple([x,y])}));pg.event.post(evt);self.pos["x"]=touch.clientX;self.pos["y"]=touch.clientY;if(event.cancelable)event.preventDefault()})},get onTouchEnd(){return __get__(this,function(self,event){if(event.cancelable)event.preventDefault()})},get onTouchMove(){return __get__(this,function(self,event){var touch=event.touches.item(0);var x=touch.clientX;var y=touch.clientY;if(abs(x-self.pos["x"])<100&&y-self.pos["y"]>200){self.pos["x"]=
x;self.pos["y"]=y;var evt=pg.event.Event(pg.KEYDOWN,dict({"key":pg.K_r}));pg.event.post(evt)}})},get onTouchCancel(){return __get__(this,function(self,event){})}});export var Renderer=__class__("Renderer",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,matrix){self.matrix=matrix;self.screen=pg.display.get_surface();self.background=pg.Surface(self.screen.get_size());self.background.fill(self.matrix.screen_color);self.screen.blit(self.background,tuple([0,0]));if(platform==
"js")self.screen._strokestyle=null;self.rect=self.screen.get_rect();self.rect_list=[self.rect];self.point_cache=PointCache();if(__in__(platform,tuple(["js","jvm"])))pg.draw.set_return(false);self.py_update()})},get render(){return __get__(this,function(self,biomorph,pos){var x1=biomorph.segments.x1;var y1=biomorph.segments.y1;var x2=biomorph.segments.x2;var y2=biomorph.segments.y2;var idx=biomorph.segments.idx;var __left0__=biomorph.segments.transform(self.matrix.size,pos);var x=__left0__[0];var y=
__left0__[1];var z=__left0__[2];var image=self.screen;var color=self.matrix.biomorph_color;var pt1=self.point_cache.py_get();var pt2=self.point_cache.py_get();image.lock();for(var i=0;i<idx;i++){pt1[0]=Math.floor(x1[i]/z)+x;pt1[1]=Math.floor(y1[i]/z)+y;pt2[0]=Math.floor(x2[i]/z)+x;pt2[1]=Math.floor(y2[i]/z)+y;pg.draw.aaline(image,color,pt1,pt2)}image.unlock();self.point_cache.set(pt1);self.point_cache.set(pt2)})},get blit(){return __get__(this,function(self,image,pos){var rect=self.screen.blit(image,
pos);self.rect_list.append(rect)})},get draw_grid(){return __get__(this,function(self,grid,size,color){self.background.fill(self.matrix.screen_color);for(var pos of grid)pg.draw.rect(self.background,color,tuple([pos[0],pos[1],size[0],size[1]]),1);self.screen.blit(self.background,tuple([0,0]));self.rect_list=[self.rect]})},get py_clear(){return __get__(this,function(self){self.screen.blit(self.background,tuple([0,0]));self.rect_list=[self.rect]})},get blank(){return __get__(this,function(self){self.screen.fill(self.matrix.screen_color);
self.py_update()})},get py_update(){return __get__(this,function(self){pg.display.py_update()})}});export var Config=__class__("Config",[object],{__module__:__name__,get setup(){return __get__(this,function(self,w,h){pg.init();pg.display.set_mode(tuple([w,h]));pg.display.set_caption("Biomorph Evolve");if(platform!="js")pg.display.set_icon(pg.image.load("icon.png"))})}});export var RectCache=__class__("RectCache",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self._cache=
[]})},get py_get(){return __get__(this,function(self,x,y,w,h){if(len(self._cache)>0){var rect=self._cache.py_pop();rect.x=x;rect.y=y;rect.width=w;rect.height=h}else var rect=pg.Rect(x,y,w,h);return rect})},get set(){return __get__(this,function(self,rect){self._cache.append(rect)})}});export var ListCache=__class__("ListCache",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self._cache=[]})},get py_get(){return __get__(this,function(self,x,y){if(len(self._cache)>0){var lst=
self._cache.py_pop();lst[0]=x;lst[1]=y}else var lst=[x,y];return lst})},get set(){return __get__(this,function(self,lst){self._cache.append(lst)})}});export var PointCache=__class__("PointCache",[ListCache],{__module__:__name__,get py_get(){return __get__(this,function(self){if(len(self._cache)>0)return self._cache.py_pop();else return[0,0]})}});export var DictCache=__class__("DictCache",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self._cache=[]})},get py_get(){return __get__(this,
function(self){if(len(self._cache)>0)var d=self._cache.py_pop();else{var d=dict({});for(var i=1;i<10;i++)d[i]=0}return d})},get set(){return __get__(this,function(self,d){self._cache.append(d)})}});

//# sourceMappingURL=control.map