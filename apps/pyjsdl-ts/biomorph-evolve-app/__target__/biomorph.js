'use strict';var random={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,
getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{App,Color,Config,Control,DictCache,ListCache,RectCache,Renderer}from"./control.js";import*as __module_random__ from"./random.js";__nest__(random,"",__module_random__);var __name__="__main__";if(!hasattr(random,"randrange"))random.randrange=
function __lambda__(i,f){return random.choice(range(i,f))};export var size=160;export var col=3;export var row=3;export var gene=dict({"num":9,"lv":tuple([-9,9]),"ln":tuple([3,9])});export var genome=dict(function(){var __accu0__=[];for(var i=1;i<gene["num"]+1;i++)__accu0__.append(tuple([i,gene["lv"]]));return __accu0__}());genome[9]=gene["ln"];export var biomorph_color=Color(40,60,80);export var screen_color=Color(150,150,150);export var grid_color=Color(0,20,40);export var dict_cache=DictCache();
export var list_cache=ListCache();export var rect_cache=RectCache();export var Matrix=__class__("Matrix",[object],{__module__:__name__,get __init__(){return __get__(this,function(self){self.biomorph_selected=null;self.pos_select=null;self.biomorph=[];self.processing=null;self.reset=false;self.dx=function(){var __accu0__=[];for(var i=0;i<8;i++)__accu0__.append(0);return __accu0__}();self.dy=function(){var __accu0__=[];for(var i=0;i<8;i++)__accu0__.append(0);return __accu0__}();self.repeat=false;self.control=
null;self.size=size;self.biomorph_color=biomorph_color;self.screen_color=screen_color;self.grid_color=grid_color;self.renderer=Renderer(self);self.pos=function(){var __accu0__=[];for(var r=0;r<row;r++)for(var c=0;c<col;c++)__accu0__.append(tuple([c*size+Math.floor(size/2),r*size+Math.floor(size/2)]));return __accu0__}();self.grid=function(){var __accu0__=[];for(var r=0;r<row;r++)for(var c=0;c<col;c++)__accu0__.append(tuple([c*size,r*size]));return __accu0__}();self.rect=function(){var __accu0__=[];
for(var grid of self.grid)__accu0__.append(rect_cache.py_get(grid[0],grid[1],size,size));return __accu0__}();self.renderer.draw_grid(self.grid,tuple([size,size]),self.grid_color);self.init();self.renderer.py_update()})},get init(){return __get__(this,function(self){for(var i=0;i<row*col;i++)self.biomorph.append(Biomorph());for(var [i,biomorph]of enumerate(self.biomorph)){self.develop(biomorph);self.display(biomorph,self.pos[i])}})},get prune(){return __get__(this,function(self){for(var biomorph of self.biomorph)if(!self.biomorph_selected)biomorph.deinit();
else if(biomorph.segments!==null)biomorph.segments.idx=0;self.biomorph.__setslice__(0,null,null,[])})},get reproduce(){return __get__(this,function(self,biomorph){for(var i=0;i<row*col-1;i++)self.biomorph.append(biomorph.reproduce());self.biomorph.insert(4,biomorph);return self.biomorph})},get develop(){return __get__(this,function(self,biomorph){var startx=0;var starty=0;var startdir=2;biomorph.develop(startx,starty,startdir,self.dx,self.dy)})},get display(){return __get__(this,function(self,biomorph,
pos){self.renderer.render(biomorph,pos)})},get biomorph_select(){return __get__(this,function(self,pos){self.pos_select=pos;for(var [i,r]of enumerate(self.rect))if(r.collidepoint(pos)){self.biomorph_selected=self.biomorph[i];break}return self.biomorph_selected})},get restart(){return __get__(this,function(self){self.renderer.py_clear();self.prune();self.init();self.renderer.py_update()})},get refresh(){return __get__(this,function(self){self.renderer.py_update()})},get terminate(){return __get__(this,
function(self){self.renderer.blank();self.prune()})},get py_update(){return __get__(this,function(self){if(self.biomorph_selected!==null)if(!self.reset){self.control.set_wait(true);self.renderer.py_clear();self.prune();self.reset=true;self.processing=0;self.biomorph=self.reproduce(self.biomorph_selected)}else if(self.processing<row*col){var biomorph=self.biomorph[self.processing];self.develop(biomorph);self.display(biomorph,self.pos[self.processing]);self.processing++}else{self.renderer.py_update();
if(self.repeat){self.biomorph_selected=self.biomorph_selected.reproduce();self.reset=false}else{self.biomorph_selected=null;self.control.set_wait(false);self.reset=false}}})}});export var Biomorph=__class__("Biomorph",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,genes){if(typeof genes=="undefined"||genes!=null&&genes.hasOwnProperty("__kwargtrans__"))var genes=null;self.genes=dict_cache.py_get();if(genes!==null){for(var i of genes.py_keys())self.genes[i]=genes[i];
var i=random.choice(list(self.genes.py_keys()));self.genes[i]+=random.choice([-1,1]);if(self.genes[i]<genome[i][0])self.genes[i]=genome[i][0]+1;else if(self.genes[i]>genome[i][1])self.genes[i]=genome[i][1]-1}else{for(var i=1;i<9;i++)self.genes[i]=random.randrange(genome[i][0],genome[i][1]+1);self.genes[9]=random.randrange(genome[i][1]-3,genome[i][1]+1)}self.segments=null;self.rect=rect_cache.py_get(0,0,size,size);self.dim=size})},get deinit(){return __get__(this,function(self){dict_cache.set(self.genes);
rect_cache.set(self.rect);self.segments.deinit()})},get reproduce(){return __get__(this,function(self){return Biomorph(self.genes)})},get develop(){return __get__(this,function(self,startx,starty,startdir,dx,dy){self.segments=Segment();var __left0__=self.plugin(self.genes,dx,dy);var order=__left0__[0];var dx=__left0__[1];var dy=__left0__[2];self.tree(startx,starty,order,startdir,dx,dy)})},get tree(){return __get__(this,function(self,x,y,length,dir,dx,dy){var _dir=__mod__(dir,8);var xnew=x+length*
dx[_dir];var ynew=y+length*dy[_dir];self.segments.add(x,y,xnew,ynew);if(length>0){self.tree(xnew,ynew,length-1,_dir-1,dx,dy);self.tree(xnew,ynew,length-1,_dir+1,dx,dy)}})},get plugin(){return __get__(this,function(self,gene,dx,dy){var order=gene[9];dx[3]=gene[1];dx[4]=gene[2];dx[5]=gene[3];dx[1]=-dx[3];dx[0]=-dx[4];dx[2]=0;dx[6]=0;dx[7]=-dx[5];dy[2]=gene[4];dy[3]=gene[5];dy[4]=gene[6];dy[5]=gene[7];dy[6]=gene[8];dy[0]=dy[4];dy[1]=dy[3];dy[7]=dy[5];return tuple([order,dx,dy])})}});export var Segment=
__class__("Segment",[object],{__module__:__name__,_cache:[],get __init__(){return __get__(this,function(self){self.x1=self.get_list();self.y1=self.get_list();self.x2=self.get_list();self.y2=self.get_list();self.idx=0;self.xmin=0;self.xmax=0;self.ymin=0;self.ymax=0})},get add(){return __get__(this,function(self,x1,y1,x2,y2){self.x1[self.idx]=x1;self.y1[self.idx]=y1;self.x2[self.idx]=x2;self.y2[self.idx]=y2;self.idx++;return null})},get dim(){return __get__(this,function(self){self.xmin=min(self.x2);
self.xmax=max(self.x2);self.ymin=min(self.y2);self.ymax=max(self.y2);return tuple([self.xmax-self.xmin,self.ymax-self.ymin])})},get transform(){return __get__(this,function(self,size,pos){var __left0__=self.dim();var width=__left0__[0];var height=__left0__[1];var maxsize=max(width,height);var _size=size-6;if(_size>maxsize)var adj=1;else var adj=maxsize/_size;var mid=Math.floor(_size/2);var xmin=Math.floor(self.xmin/adj);var xmax=Math.floor(self.xmax/adj);var ymin=Math.floor(self.ymin/adj);var ymax=
Math.floor(self.ymax/adj);var w=xmax-xmin;var h=ymax-ymin;var x=pos[0]-xmin-Math.floor(w/2)-1;var y=pos[1]-ymin-Math.floor(h/2)-1;return tuple([x,y,adj])})},get get_list(){return __get__(this,function(self){if(len(self._cache)>0)return self._cache.py_pop();else return function(){var __accu0__=[];for(var i=0;i<Math.pow(2,gene["ln"][1]+1);i++)__accu0__.append(0);return __accu0__}()})},get deinit(){return __get__(this,function(self){for(var i=0;i<self.idx;i++){self.x1[i]=0;self.y1[i]=0;self.x2[i]=0;
self.y2[i]=0}self._cache.append(self.x1);self._cache.append(self.y1);self._cache.append(self.x2);self._cache.append(self.y2);self.idx=0;return null})}});var __left0__=null;export var app=__left0__;export var matrix=__left0__;export var control=__left0__;export var run=function(){matrix.py_update();var quit=control.py_update();if(quit){matrix.terminate();app.terminate()}};export var main=function(){var config=Config();config.setup(size*col,size*row);matrix=Matrix();control=Control(matrix);matrix.control=
control;app=App(run);app.run()};if(__name__=="__main__")main();

//# sourceMappingURL=biomorph.map