'use strict';var random={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,_sort,abs,all,any,assert,bin,bool,bytearray,bytes,callable,chr,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,hex,input,int,isinstance,issubclass,len,list,map,max,min,object,oct,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as __module_random__ from"./random.js";__nest__(random,"",__module_random__);import{cos_table,load_image,sin_table}from"./util.js";import*as pygame from"./pyjsdl.js";var __name__="entity";if(!hasattr(random,"randrange"))random.randrange=function __lambda__(i,
f){return random.choice(range(i,f))};if(float(pygame.__version__)<=.27)pygame.mouse.get_focused=function __lambda__(){return pygame.mouse.mouseMove["x"]!=-1};export var Segment=__class__("Segment",[pygame.sprite.Sprite],{__module__:__name__,images:dict({}),get __init__(){return __get__(this,function(self,x,y,segment_type,segment_size){pygame.sprite.Sprite.__init__(self);self.x=x;self.y=y;self.pos_x=float(self.x);self.pos_y=float(self.y);if(!len(Segment.images.py_keys())){var segment_num=1;for(var segment_image of tuple(["segment1.png",
"segment2.png","segment3.png","segment4.png"])){var image_size=dict({});var img=load_image(segment_image);for(var size of tuple([1])){var image=dict({});for(var degree=0;degree<360;degree+=10)image[degree]=pygame.transform.rotozoom(img,-degree,.2*size);image_size[size]=image}Segment.images[segment_num]=image_size;segment_num++}}self.direction=random.randrange(0,35)*10;self.distance=random.randrange(1,10);self.image=Segment.images[segment_type][segment_size][self.direction];self.rect=self.image.get_rect(__kwargtrans__({center:tuple([self.x,
self.y])}));self.velocity=1*segment_size})},get location(){return __get__(this,function(self){if(self.distance>0)self.distance--;else{self.direction=random.randrange(360);self.distance=random.randrange(1,10)}self.pos_x+=+self.velocity*sin_table[self.direction];self.pos_y+=-self.velocity*cos_table[self.direction];self.x=int(self.pos_x);self.y=int(self.pos_y);self.rect=self.image.get_rect(__kwargtrans__({center:tuple([self.x,self.y])}))})},get py_update(){return __get__(this,function(self){self.location()})}});
export var Biomorph=__class__("Biomorph",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,matrix,x,y,segments,biomorph_type,biomorph_size){self.matrix=matrix;self.py_metatype=biomorph_type;self.size=biomorph_size;self.segment=pygame.sprite.OrderedUpdates();self.segment_num=segments;self.edge_contact=false;self.edge_response=0;self.velocity=1*self.size;var count=0;for(var i=0;i<self.segment_num-1;i++){if(!count){var x_initial=random.randrange(10,self.matrix.width-50);
var y_initial=random.randrange(10,self.matrix.height-10);var count=2}var segment=Segment(x_initial+count*20,y_initial,self.py_metatype,self.size);self.segment.add(segment);count--}self.segment_head=Segment(x,y,self.py_metatype,self.size);self.segment_head.image=Segment.images[self.py_metatype][self.size][130];self.segment.add(self.segment_head);self.segments=self.segment.sprites();self.segments.reverse();self.matrix.biomorph_entity.add(self.segment.sprites())})},get molecular_interaction(){return __get__(this,
function(self){var segments=self.segments;for(var i=0;i<len(segments)-2;i++){var x1=segments[i].pos_x;var y1=segments[i].pos_y;var x2=segments[i+2].pos_x;var y2=segments[i+2].pos_y;var separation=Math.pow(Math.pow(x1-x2,2)+Math.pow(y1-y2,2),.5);if(separation<30*self.size){var midx=abs((x1+x2)/2);var midy=abs((y1+y2)/2);var x3=segments[i+1].pos_x;var y3=segments[i+1].pos_y;var mid3x=abs((midx+x3)/2);var mid3y=abs((midy+y3)/2);segments[i+1].pos_x=mid3x;segments[i+1].pos_y=mid3y;segments[i+1].x=int(segments[i+
1].pos_x);segments[i+1].y=int(segments[i+1].pos_y);segments[i+1].rect.center=tuple([segments[i+1].x,segments[i+1].y])}var x1=segments[i].pos_x;var y1=segments[i].pos_y;var x2=segments[i+1].pos_x;var y2=segments[i+1].pos_y;var separation=Math.pow(Math.pow(x1-x2,2)+Math.pow(y1-y2,2),.5);if(separation>11*self.size){if(x1<x2)x1+=self.velocity;else if(x1>x2)x1-=self.velocity;if(y1<y2)y1+=self.velocity;else if(y1>y2)y1-=self.velocity;segments[i].pos_x=x1;segments[i].pos_y=y1;segments[i].x=int(segments[i].pos_x);
segments[i].y=int(segments[i].pos_y);segments[i].rect.center=tuple([segments[i].x,segments[i].y])}else if(separation<9*self.size){if(x1<x2)x1-=self.velocity;else if(x1>x2)x1+=self.velocity;if(y1<y2)y1-=self.velocity;else if(y1>y2)y1+=self.velocity;segments[i].pos_x=x1;segments[i].pos_y=y1;segments[i].x=int(segments[i].pos_x);segments[i].y=int(segments[i].pos_y);segments[i].rect.center=tuple([segments[i].x,segments[i].y])}}var i=self.segment_num-1;var j=i-1;var x1=segments[i].pos_x;var y1=segments[i].pos_y;
var x2=segments[j].pos_x;var y2=segments[j].pos_y;var separation=Math.pow(Math.pow(x1-x2,2)+Math.pow(y1-y2,2),.5);if(separation>5*self.size){if(x1<x2)x1+=self.velocity;else if(x1>x2)x1-=self.velocity;if(y1<y2)y1+=self.velocity;else if(y1>y2)y1-=self.velocity;segments[i].pos_x=x1;segments[i].pos_y=y1;segments[i].x=int(segments[i].pos_x);segments[i].y=int(segments[i].pos_y);segments[i].rect.center=tuple([segments[i].x,segments[i].y])}})},get check_edge(){return __get__(this,function(self){var segment_at_edge=
pygame.sprite.spritecollide(self.segment_head,self.matrix.borders,false);if(len(segment_at_edge)>0){self.edge_contact=true;self.edge_response=10}})},get interaction(){return __get__(this,function(self){self.check_edge();if(self.edge_contact||pygame.mouse.get_focused()){var segment=self.segment_head;var x1=segment.pos_x;var y1=segment.pos_y;if(self.edge_contact){var x2=Math.floor(self.matrix.width/2);var y2=Math.floor(self.matrix.height/2);self.edge_response--;if(!self.edge_response)self.edge_contact=
false}else{var __left0__=pygame.mouse.get_pos();var x2=__left0__[0];var y2=__left0__[1]}var separation=Math.pow(Math.pow(x1-x2,2)+Math.pow(y1-y2,2),.5);if(separation>25){if(x1<x2)x1+=self.velocity;else if(x1>x2)x1-=self.velocity;if(y1<y2)y1+=self.velocity;else if(y1>y2)y1-=self.velocity;segment.pos_x=x1;segment.pos_y=y1;segment.x=int(segment.pos_x);segment.y=int(segment.pos_y);segment.rect.center=tuple([segment.x,segment.y])}}})},get py_update(){return __get__(this,function(self){self.segment.py_update();
self.molecular_interaction();self.interaction()})}});

//# sourceMappingURL=entity.map