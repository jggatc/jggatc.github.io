'use strict';var random={};var sys={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,
__ior__,__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,_sort,abs,all,any,assert,bin,bool,bytearray,bytes,callable,chr,delattr,dict,dir,divmod,enumerate,filter,
float,getattr,hasattr,hex,input,int,isinstance,issubclass,len,list,map,max,min,object,oct,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{Control}from"./interface.js";import{Biomorph}from"./entity.js";import*as __module_sys__ from"./sys.js";__nest__(sys,"",__module_sys__);import{os}from"./pyjsdl.pylib.js";import*as __module_random__ from"./random.js";__nest__(random,
"",__module_random__);import*as pygame from"./pyjsdl.js";var __name__="__main__";if(!hasattr(random,"randrange"))random.randrange=function __lambda__(i,f){return random.choice(range(i,f))};export var test=false;export var MATRIX_X=400;export var MATRIX_Y=300;export var BG_COLOR=tuple([5,10,15]);export var Matrix=__class__("Matrix",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,config){self.width=config["display_size"][0];self.height=config["display_size"][1];pygame.display.init();
pygame.display.set_caption("Biomorph Entity");self.screen=pygame.display.set_mode(tuple([self.width,self.height]));self.borders=self.matrix_borders();self.screen_matrix=pygame.display.get_surface();self.control_list=[];self.control=null;self.screen_base=pygame.Surface(tuple([self.width,self.height]));self.screen_color=config["background_color"];self.screen_base.fill(self.screen_color);self.screen.blit(self.screen_base,tuple([0,0]));self.update_list=[];self.display_update=false;self.biomorph_add=false;
self.biomorph_count=0;self.segment_count=50;self.biomorph_type=3;self.biomorph_size=1;self.biomorphs=dict({"0.5":dict({}),1:dict({}),"1.5":dict({}),2:dict({}),"2.5":dict({})});self.biomorph_entity=pygame.sprite.OrderedUpdates()})},get refresh_screen(){return __get__(this,function(self){self.screen.blit(self.screen_base,tuple([0,0]));pygame.display.flip()})},get restart(){return __get__(this,function(self){self.refresh_screen();self.biomorph_entity.empty();self.biomorph_type=random.randrange(1,5);
self.setup()})},get setup(){return __get__(this,function(self,biomorph){if(typeof biomorph=="undefined"||biomorph!=null&&biomorph.hasOwnProperty("__kwargtrans__"))var biomorph=true;self.biomorphs=dict({1:dict({})});self.biomorph_entity.empty();self.biomorph_add=false;if(biomorph)self.add_biomorph();self.display_update=true;self.py_update()})},get add_biomorph(){return __get__(this,function(self,x,y,segments){if(typeof x=="undefined"||x!=null&&x.hasOwnProperty("__kwargtrans__"))var x=null;if(typeof y==
"undefined"||y!=null&&y.hasOwnProperty("__kwargtrans__"))var y=null;if(typeof segments=="undefined"||segments!=null&&segments.hasOwnProperty("__kwargtrans__"))var segments=null;if(x===null)var x=Math.floor(self.width/2);if(y===null)var y=Math.floor(self.height/2);if(segments===null)var segments=self.segment_count;self.biomorph_count++;var biomorph=Biomorph(self,x,y,segments,self.biomorph_type,self.biomorph_size);self.biomorphs[self.biomorph_size][self.biomorph_count]=biomorph;return biomorph})},get simulation_set(){return __get__(this,
function(self,parameter){if(typeof parameter=="undefined"||parameter!=null&&parameter.hasOwnProperty("__kwargtrans__"))var parameter=null;self.biomorph_add=false;if(parameter=="Add Biomorph")self.biomorph_add=!self.biomorph_add})},get biomorph_select(){return __get__(this,function(self,position){if(self.biomorph_add){var __left0__=position;var x=__left0__[0];var y=__left0__[1];self.add_biomorph(x,y)}})},get matrix_borders(){return __get__(this,function(self){var Edge=__class__("Edge",[pygame.sprite.Sprite],
{__module__:__name__,get __init__(){return __get__(this,function(self,x,y,dim_x,dim_y,side){pygame.sprite.Sprite.__init__(self);self.rect=pygame.Rect(x,y,dim_x,dim_y);self.side=side})}});var borders=pygame.sprite.Group();var borders=pygame.sprite.Group();borders.add(Edge(0,0,self.width,1,"n"));borders.add(Edge(0,self.height-2,self.width,1,"s"));borders.add(Edge(0,0,1,self.height,"w"));borders.add(Edge(self.width-2,0,1,self.height,"e"));return borders})},get pause(){return __get__(this,function(self){pygame.time.wait(100)})},
get py_update(){return __get__(this,function(self){if(self.control.pause){self.pause();return}if(self.display_update)self.screen.blit(self.screen_base,tuple([0,0]));self.biomorphs[self.biomorph_size][self.biomorph_count].py_update();self.biomorph_entity.py_clear(self.screen_matrix,self.screen_base);self.update_list.extend(self.biomorph_entity.draw(self.screen_matrix))})}});export var program_options=function(){var config=dict({"display_gamma":null,"display_size":null,"background_color":null});try{var conf=
dict({});var config_file=open("config.ini");var cfg_setting=function(){var __accu0__=[];for(var line of config_file)if(line.__getslice__(0,1,1).isalpha())__accu0__.append(line.strip().py_split(" ",1));return __accu0__}();var cfg_setting=dict(cfg_setting);for(var cfg of config)if(__in__(cfg,cfg_setting))conf[cfg]=cfg_setting[cfg].strip();config_file.close()}catch(__except0__){if(isinstance(__except0__,tuple([IOError,ValueError])));else throw __except0__;}for(var cfg of conf)if(cfg=="display_gamma")try{config["display_gamma"]=
float(conf["display_gamma"])}catch(__except0__){if(isinstance(__except0__,ValueError));else throw __except0__;}else if(cfg=="display_size")config["display_size"]=function(){var __accu0__=[];for(var size of conf["display_size"].py_split("x"))__accu0__.append(int(size));return __accu0__}();else if(cfg=="background_color")config["background_color"]=function(){var __accu0__=[];for(var color of conf["background_color"].py_split(","))__accu0__.append(int(color));return __accu0__}();var program_usage="%prog [options]";
var program_desc="Biomorph Entity";var parser=optparse.OptionParser(__kwargtrans__({usage:program_usage,description:program_desc}));parser.add_option("-d","--doc",__kwargtrans__({dest:"doc",action:"store_true",help:"display program documentation"}));parser.add_option("-g",__kwargtrans__({dest:"display_gamma",action:"store",help:"-g value (value: 0.5 to 3.0)"}));parser.add_option("-s",__kwargtrans__({dest:"display_size",action:"store",help:"-s value (value: WIDTHxHEIGHT)"}));parser.add_option("-c",
__kwargtrans__({dest:"background_color",action:"store",help:"-c value (value: R,G,B)"}));var __left0__=parser.parse_args();var options=__left0__[0];var args=__left0__[1];if(options.doc){try{var docfile=open("README.txt")}catch(__except0__){if(isinstance(__except0__,IOError)){print("Documentation not found.");sys.exit()}else throw __except0__;}try{var doc=[];for(var line of docfile.readlines()){var text=textwrap.wrap(line,80);if(text)for(var l of text)doc.append(l+"\n");else doc.append("\n")}}catch(__except0__){if(isinstance(__except0__,
ImportError))var doc=docfile.readlines();else throw __except0__;}docfile.close();print("".join(doc));sys.exit()}if(options.display_gamma)try{config["display_gamma"]=float(options.display_gamma)}catch(__except0__){if(isinstance(__except0__,ValueError))config["display_gamma"]=null;else throw __except0__;}if(options.display_size)config["display_size"]=tuple(function(){var __accu0__=[];for(var size of options.display_size.py_split("x"))__accu0__.append(int(size));return __accu0__}());if(options.background_color)config["background_color"]=
tuple(function(){var __accu0__=[];for(var color of options.background_color.py_split(","))__accu0__.append(int(color));return __accu0__}());for(var cfg of config)if(config[cfg])if(cfg=="display_gamma")if(config[cfg]<.5)config[cfg]=.5;else{if(config[cfg]>3)config[cfg]=3}else if(cfg=="display_size")for(var [i,size]of enumerate(config[cfg]))if(size<100)config[cfg][i]=100;else{if(size>1024)config[cfg][i]=1024}else if(cfg=="background_color")for(var [i,clr]of enumerate(config[cfg]))if(clr<0)config[cfg][i]=
0;else if(clr>255)config[cfg][i]=255;return config};export var setup=function(){var config=dict({});config["display_size"]=tuple([MATRIX_X,MATRIX_Y]);config["background_color"]=BG_COLOR;var matrix=Matrix(config);var control=Control(matrix);matrix.control=control;return tuple([matrix,control])};var __left0__=null;export var matrix=__left0__;export var control=__left0__;export var prerun=function(){matrix.setup();pygame.display.set_callback(run)};export var run=function(){matrix.update_list.__setslice__(0,
null,null,[]);control.py_update();matrix.py_update();if(!matrix.display_update)pygame.display.py_update(matrix.update_list);else{matrix.display_update=false;pygame.display.flip()}};export var main=function(){var __left0__=setup();matrix=__left0__[0];control=__left0__[1];var images=["./data/segment1.png","./data/segment2.png","./data/segment3.png","./data/segment4.png","./data/icon.png"];pygame.display.setup(prerun,images)};if(__name__=="__main__")main();

//# sourceMappingURL=biomorph.map