'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,_sort,abs,all,any,assert,bin,bool,bytearray,bytes,callable,chr,delattr,dict,dir,divmod,enumerate,filter,float,getattr,hasattr,
hex,input,int,isinstance,issubclass,len,list,map,max,min,object,oct,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import*as pygame from"./pyjsdl.js";var __name__="interface";export var MatrixInterface=__class__("MatrixInterface",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,matrix){self.matrix=matrix;interphase.Interface.__init__(self,
__kwargtrans__({position:tuple([self.matrix.width/2,self.matrix.height-50]),image:"panel.png",color:tuple([43,50,58]),size:tuple([350,100]),moveable:true,position_offset:tuple([0,95]),button_image:["button.png"],control_image:["control.png"],font_color:tuple([175,180,185]),tips_fontcolor:tuple([175,180,185]),pointer_interact:true,control_minsize:tuple([20,20]),control_size:"auto",label_display:true}))})},get add_controls(){return __get__(this,function(self){self.add(__kwargtrans__({identity:"Control",
control_type:"function_select",position:tuple([50,50]),size:tuple([40,40]),control_list:["__Action","__Sim"],icon_list:["icon.png","restart.png"],link:[["Biomorph","Type","Length","Width"],["Restart","Exit"]],link_activated:true,label_display:false}));self.add(__kwargtrans__({identity:"Biomorph",control_type:"control_toggle",position:tuple([175,30]),size:"min_width",control_list:["Biomorph"],tip_list:["Biomorph Generate"],control_outline:true,activated_toggle:false,label_display:false}));self.add(__kwargtrans__({identity:"Type",
control_type:"control_select",position:tuple([130,70]),size:"min",control_list:["__numeric",tuple([1,4])],tip_list:["Biomorph Type"],control_outline:true}));self.add(__kwargtrans__({identity:"Length",control_type:"control_select",position:tuple([175,70]),size:"min",control_list:["__numeric",tuple([5,50])],tip_list:["Biomorph Length"],control_outline:true}));self.add(__kwargtrans__({identity:"Width",control_type:"control_select",position:tuple([220,70]),size:"min",control_list:["__numeric",tuple([1,
5])],tip_list:["Biomorph Size"],control_outline:true}));self.add(__kwargtrans__({identity:"Restart",control_type:"control_toggle",position:tuple([130,50]),size:tuple([40,40]),control_list:["Restart"],tip_list:["Restart Simulation"],label_display:false}));self.add(__kwargtrans__({identity:"Exit",control_type:"control_toggle",position:tuple([230,50]),size:tuple([40,40]),control_list:["Exit"],tip_list:["Exit Simulation"],label_display:false}));self.add(__kwargtrans__({identity:"__Fix",control_type:"control_toggle",
position:tuple([315,90]),color:tuple([0,20,30]),font_color:tuple([0,120,160]),control_list:["!"],control_image:["none"],control_outline:true}));self.add(__kwargtrans__({identity:"__Help",control_type:"control_toggle",position:tuple([335,90]),color:tuple([0,20,30]),font_color:tuple([0,120,160]),control_list:["?"],control_image:["none"],control_outline:true}));var controls=self.get_control();controls["Type"].set_value(4);controls["Length"].set_value(50);controls["Width"].set_value(2)})},get py_update(){return __get__(this,
function(self){interphase.Interface.py_update(self);var state=self.get_state();self.matrix.control.panel_displayed=state.panel_interact;if(state.control)if(state.control=="Control")self.matrix.simulation_set();else if(state.control=="Biomorph")if(self.get_control("Biomorph").is_activated())self.matrix.simulation_set("Add Biomorph");else self.matrix.simulation_set();else if(state.control=="Type")self.matrix.biomorph_type=int(state.value);else if(state.control=="Length")self.matrix.segment_count=int(state.value);
else if(state.control=="Width")self.matrix.biomorph_size=float(state.value)*.5;else if(state.control=="Restart"){self.get_control("Biomorph").set_activated(false);self.matrix.setup(__kwargtrans__({biomorph:false}))}else if(state.control=="Exit")self.matrix.control.quit=true;else if(state.control=="__Fix")self.set_moveable("Fixed");else if(state.control=="__Help")self.set_tips_display();return state})}});export var Control=__class__("Control",[object],{__module__:__name__,get __init__(){return __get__(this,
function(self,matrix){self.matrix=matrix;pygame.key.set_repeat(100,10);self.panel_displayed=false;self.clock=pygame.time.Clock();pygame.event.set_blocked(pygame.MOUSEMOTION);self.quit=false;pygame.font.init();var font=pygame.font.get_default_font();self.font=pygame.font.Font(font,24);self.font2=pygame.font.Font(font,14);self.quit_request=false;self.pause=false;self.fps_ave=function(){var __accu0__=[];for(var i=0;i<100;i++)__accu0__.append(0);return __accu0__}();self.fps_num=0})},get define_controls(){return __get__(this,
function(self){var panel=MatrixInterface(self.matrix);var panel_group=pygame.sprite.RenderUpdates(panel);return tuple([panel,panel_group])})},get pause_program(){return __get__(this,function(self,text1,text2,text3){if(typeof text2=="undefined"||text2!=null&&text2.hasOwnProperty("__kwargtrans__"))var text2=null;if(typeof text3=="undefined"||text3!=null&&text3.hasOwnProperty("__kwargtrans__"))var text3=null;self.matrix.screen.fill(tuple([0,0,0]));var text=self.font.render(text1,true,tuple([100,100,
100]));var size=self.font.size(text1);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.width/2)-Math.floor(size[0]/2),Math.floor(self.matrix.height/2)-Math.floor(size[1]/2)-12]));if(text2){var text=self.font2.render(text2,true,tuple([100,100,100]));var size=self.font2.size(text2);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.width/2)-Math.floor(size[0]/2),Math.floor(self.matrix.height/2)-Math.floor(size[1]/2)+25]))}if(text3){var text=self.font2.render(text3,true,tuple([100,
100,100]));var size=self.font2.size(text3);self.matrix.screen.blit(text,tuple([Math.floor(self.matrix.width/2)-Math.floor(size[0]/2),Math.floor(self.matrix.height/2)-Math.floor(size[1]/2)+40]))}pygame.display.flip()})},get matrix_control(){return __get__(this,function(self){if(!self.pause){self.pause_program("Biomorph Entity","Click to run/pause","[r]estart [p]ause [q]uit");self.pause=true}else{self.matrix.refresh_screen();self.quit_request=false;self.pause=false}})},get check_events(){return __get__(this,
function(self){for(var event of pygame.event.py_get())if(event.py_metatype==pygame.MOUSEBUTTONDOWN){if(event.button==1)self.matrix_control()}else if(event.py_metatype==pygame.KEYDOWN)if(event.key==pygame.K_p)self.matrix_control();else if(event.key==pygame.K_r){self.pause=false;self.quit_request=false;self.matrix.restart()}else if(event.key==pygame.K_q){self.pause_program("Biomorph Entity","Quit (y/n)?");self.pause=true;self.quit_request=true}else if(__in__(event.key,tuple([pygame.K_y,pygame.K_n])))if(self.quit_request)if(event.key==
pygame.K_n)self.matrix_control();else{self.matrix.biomorph_entity.empty();self.matrix.screen.fill(tuple([0,0,0]));pygame.display.flip();pygame.time.delay(10);pygame.quit();self.quit=true}})},get py_update(){return __get__(this,function(self){self.check_events();self.clock.tick(40)})}});

//# sourceMappingURL=interface.map