'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{os}from"./pyjsdl.pylib.js";import*as pg from"./pyjsdl.js";var __name__="draw_pad";export var platform=null;if(platform===null)var platform="js";export var Canvas=__class__("Canvas",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,
display){self.display=display;var __left0__=self.display.get_size();self.width=__left0__[0];self.height=__left0__[1];self.display.fill(tuple([238,238,238]));self.pad=pg.Surface(tuple([self.width,self.height]));self.pad.fill(tuple([238,238,238]));self.pad_area=self.display.get_rect();self.update_rects=[];self.edges=self.set_edges();self.colors=tuple([tuple([243,139,160]),tuple([173,194,169]),tuple([167,197,235]),tuple([238,238,238])]);self.color_index=0;self.color=self.colors[0];self.set_palette_control();
self.set_reset_control();self.brushes=pg.sprite.RenderUpdates();self.brush=Brush(self);self.brushes.add(self.brush);self.update_rects.append(self.pad_area);if(platform=="js"){var handler=TouchHandler(self);pg.env.event.touchlistener.add_callback(handler)}if(platform=="pc"&&hasattr(pg,"WINDOWCLOSE"))self.windowclose=pg.WINDOWCLOSE;else self.windowclose=0;self.clock=pg.time.Clock()})},get set_edges(){return __get__(this,function(self){var __left0__=tuple([self.width,self.height]);var w=__left0__[0];
var h=__left0__[1];var edges=[];for(var rect of[tuple([0,0,20,h]),tuple([w-20,0,20,h-20]),tuple([0,0,w,20]),tuple([0,h-20,w,20])]){var edge_rect=pg.Rect(rect);edges.append(edge_rect);pg.draw.rect(self.pad,tuple([108,115,126]),edge_rect,0)}self.display.blit(self.pad,tuple([0,0]));return edges})},get set_palette_control(){return __get__(this,function(self){self.palette=pg.Surface(tuple([18,18]));self.palette.fill(self.color);pg.draw.rect(self.palette,tuple([0,0,0]),tuple([0,0,18,18]),1);self.pad.blit(self.palette,
tuple([1,self.height-19]));self.palette_area=self.display.blit(self.palette,tuple([1,self.height-19]));self.update_rects.append(self.palette_area)})},get set_reset_control(){return __get__(this,function(self){self.reset=pg.Surface(tuple([18,18]));self.reset.fill(tuple([108,115,126]));pg.draw.rect(self.reset,tuple([0,0,0]),tuple([0,0,18,18]),1);self.pad.blit(self.reset,tuple([self.width-19,self.height-19]));self.reset_area=self.display.blit(self.reset,tuple([self.width-19,self.height-19]));self.update_rects.append(self.reset_area)})},
get draw_edges(){return __get__(this,function(self){for(var edge_rect of self.edges)pg.draw.rect(self.pad,tuple([108,115,126]),edge_rect,0)})},get draw_palette_control(){return __get__(this,function(self){self.pad.blit(self.palette,tuple([1,self.height-19]))})},get draw_reset_control(){return __get__(this,function(self){self.pad.blit(self.reset,tuple([self.width-19,self.height-19]))})},get reset_pad(){return __get__(this,function(self){self.display.fill(tuple([238,238,238]));self.pad.fill(tuple([238,
238,238]));self.set_edges();self.set_palette_control();self.set_reset_control();self.update_rects.append(self.pad_area)})},get set_brush(){return __get__(this,function(self){self.brush.set_brush()})},get check_input(){return __get__(this,function(self){var quit=false;for(var evt of pg.event.py_get()){if(evt.py_metatype==pg.MOUSEBUTTONDOWN&&evt.button==1)if(self.palette_area.collidepoint(evt.pos)){self.color_index++;if(self.color_index>3)self.color_index=0;self.color=self.colors[self.color_index];
self.brush.color=self.color;self.set_palette_control()}else if(self.reset_area.collidepoint(evt.pos))self.reset_pad();else self.brush.paint=true;else if(evt.py_metatype==pg.MOUSEBUTTONUP){self.brush.paint=false;self.brush.pre_pos.py_update(-1,-1)}else if(evt.py_metatype==pg.ACTIVEEVENT){if(evt.state==2)self.update_rects.append(self.pad_area)}else if(evt.py_metatype==pg.KEYDOWN){if(evt.key==pg.K_ESCAPE)var quit=true}else if(__in__(evt.py_metatype,tuple([pg.QUIT,self.windowclose])))var quit=true;return quit}})},
get py_update(){return __get__(this,function(self){self.brushes.py_update();if(self.brush.paint){self.draw_edges();self.draw_palette_control();self.draw_reset_control();for(var rect of self.brush.strokes)self.display.blit(self.pad,tuple([rect.x,rect.y]),rect);self.update_rects.extend(self.brush.strokes)}self.brushes.py_clear(self.display,self.pad);var rects=self.brushes.draw(self.display);self.update_rects.extend(rects);pg.display.py_update(self.update_rects);self.update_rects.__setslice__(0,null,
null,[]);self.clock.tick(60)})}});export var Brush=__class__("Brush",[pg.sprite.Sprite],{__module__:__name__,get __init__(){return __get__(this,function(self,canvas){pg.sprite.Sprite.__init__(self);self.canvas=canvas;var __left0__=tuple([60,60]);self.width=__left0__[0];self.height=__left0__[1];self.radius=Math.floor(self.width/10);if(platform=="pc"){var image=os.path.join("data","brush.png");self.image=pg.image.load(image)}else self.image=pg.image.load("./data/brush.png");self.rect=self.image.get_rect();
self.offset=tuple([25,-20]);self.position=pg.Vector2(0,0);self.pre_pos=pg.Vector2(-1,-1);self.positions=[];self.strokes=[];self.color=self.canvas.color;self.paint=false})},get set_brush(){return __get__(this,function(self){self.image=pg.Surface(tuple([14,14]));pg.draw.circle(self.image,tuple([108,115,126,75]),tuple([7,7]),6,1);self.rect=self.image.get_rect();self.offset=tuple([0,0])})},get draw(){return __get__(this,function(self){self.strokes.__setslice__(0,null,null,[]);self.positions.__setslice__(0,
null,null,[]);if(self.position!=self.pre_pos&&self.pre_pos.x!=-1){var distance=self.position.distance_to(self.pre_pos);if(distance>self.radius/4){var pos_num=int(distance/(self.radius/4));for(var t of function(){var __accu0__=[];for(var i=0;i<pos_num;i++)__accu0__.append(float(i)/pos_num);return __accu0__}()){var pos=self.pre_pos.lerp(self.position,t);self.positions.append(tuple([int(pos.x),int(pos.y)]))}}}else self.positions.append(tuple([int(self.position.x),int(self.position.y)]));for(var pos of self.positions){var rect=
pg.draw.circle(self.canvas.pad,self.color,tuple([pos[0],pos[1]]),self.radius);self.strokes.append(rect)}self.pre_pos.py_update(self.position.x,self.position.y)})},get py_update(){return __get__(this,function(self){var position=pg.mouse.get_pos();if(!self.canvas.pad_area.collidepoint(position))if(self.paint)self.paint=false;self.position.py_update(position[0],position[1]);self.rect.center=tuple([self.position.x+self.offset[0],self.position.y+self.offset[1]]);if(self.paint)self.draw()})}});export var TouchHandler=
__class__("TouchHandler",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,canvas){self.canvas=canvas})},get onTouchInitiate(){return __get__(this,function(self,event){self.canvas.set_brush()})},get onTouchStart(){return __get__(this,function(self,event){var touch=event.touches.item(0);var r=pg.env.canvas.getElement().getBoundingClientRect();var x=touch.clientX-round(r.left);var y=touch.clientY-round(r.top);var evt=pg.event.Event(pg.MOUSEBUTTONDOWN,dict({"button":1,"pos":tuple([x,
y]),"event":event}));pg.event.post(evt);pg.event.mouseMove["x"]=touch.clientX;pg.event.mouseMove["y"]=touch.clientY;if(event.cancelable)event.preventDefault()})},get onTouchEnd(){return __get__(this,function(self,event){var r=pg.env.canvas.getElement().getBoundingClientRect();var x=pg.event.mouseMove["x"]-round(r.left);var y=pg.event.mouseMove["y"]-round(r.top);var evt=pg.event.Event(pg.MOUSEBUTTONUP,dict({"button":1,"pos":tuple([x,y]),"event":event}));pg.event.post(evt);if(event.cancelable)event.preventDefault()})},
get onTouchMove(){return __get__(this,function(self,event){var touch=event.touches.item(0);pg.event.mouseMove["x"]=touch.clientX;pg.event.mouseMove["y"]=touch.clientY})},get onTouchCancel(){return __get__(this,function(self,event){})}});export var App=__class__("App",[object],{__module__:__name__,get __init__(){return __get__(this,function(self,display){self.canvas=Canvas(display);self.quit=false})},get run(){return __get__(this,function(self){self.quit=self.canvas.check_input();self.canvas.py_update()})}});
export var display=null;export var setup=function(){pg.init();display=pg.display.set_mode(tuple([500,400]));pg.display.set_caption("Draw Pad");if(platform!="js"){var icon=pg.image.load(os.path.join("data","pad.png"));pg.display.set_icon(icon)}pg.event.set_blocked(pg.MOUSEMOTION);pg.mouse.set_cursor(tuple([8,8]),tuple([0,0]),tuple([0,0,0,0,0,0,0,0]),tuple([0,0,0,0,0,0,0,0]))};export var main=function(){setup();var app=App(display);while(true){if(app.quit)break;app.run()}};export var run_js=function(){var app=
App(display);pg.set_callback(app)};export var main_js=function(){setup();pg.setup(run_js,["./data/brush.png"])};if(__name__=="__main__")if(__in__(platform,tuple(["pc","jvm"])))main();else if(platform=="js")main_js();

//# sourceMappingURL=draw_pad.map