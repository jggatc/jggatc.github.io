<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>GATC</title><link href="https://gatc.ca/" rel="alternate"/><link href="https://gatc.ca/feeds/all.atom.xml" rel="self"/><id>https://gatc.ca/</id><updated>2025-01-22T20:48:00-05:00</updated><subtitle>Code of Life</subtitle><entry><title>Biomorph Entity App</title><link href="https://gatc.ca/biomorph-entity-app/" rel="alternate"/><published>2025-01-22T20:48:00-05:00</published><updated>2025-01-22T20:48:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2025-01-22:/biomorph-entity-app/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/biomorph-entity/"&gt;Biomorph Entity&lt;/a&gt; program simulates an artificial life entity. Simple rules of segment interaction leads to emergence of complex behaviour.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/biomorph-entity/"&gt;Biomorph Entity&lt;/a&gt; program simulates an artificial life entity. Simple rules of segment interaction leads to emergence of complex behaviour.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="300" id="app-container-biomorph-entity"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appScriptLauncher('biomorph-entity')"&gt;
    &lt;div id="app-title"&gt;Biomorph Entity&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
The app was compiled to JavaScript from a script coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl&lt;/a&gt; module.&lt;/div&gt;
&lt;p&gt;The program was coded in &lt;a class="reference external" href="https://python.org"&gt;Python programming language&lt;/a&gt; and &lt;a class="reference external" href="https://www.pygame.org"&gt;Pygame multimedia library&lt;/a&gt;, and was compiled to JavaScript with the &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt Python-to-JavaScript compiler&lt;/a&gt; and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pyjsdl is an HTML5 multimedia library that is a substitute for Pygame functionality. Pyjsdl-ts is a Pyjsdl port adapted for Transcrypt. Transcrypt can compile Python&amp;nbsp;3 code to JavaScript, deriving an app that can run in the browser. For information on the Pyjsdl-ts, check &lt;a class="reference external" href="https://gatc.ca/usage-of-pyjsdl-with-transcrypt/"&gt;Usage of Pyjsdl with Transcrypt&lt;/a&gt; post.&lt;/p&gt;
</content><category term="Artificial Life, Biology, Programming"/><category term="alife"/><category term="pyjsdl"/><category term="pyjsdl-ts"/><category term="transcrypt"/></entry><entry><title>Brownian Motion App</title><link href="https://gatc.ca/brownian-motion-app/" rel="alternate"/><published>2022-01-19T14:03:00-05:00</published><updated>2022-01-19T14:03:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2022-01-19:/brownian-motion-app/</id><summary type="html">&lt;p&gt;Brownian Motion Simulation demonstrates the phenomenon of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Brownian_motion"&gt;brownian motion&lt;/a&gt;, where microscopic particles display a random walk due to molecular collisions. For instance, particles suspended in liquid move due to random collisions by water molecules that are in constant motion.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Brownian Motion Simulation demonstrates the phenomenon of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Brownian_motion"&gt;brownian motion&lt;/a&gt;, where microscopic particles display a random walk due to molecular collisions. For instance, particles suspended in liquid move due to random collisions by water molecules that are in constant motion.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/brownian-motion/"&gt;Brownian Motion Simulation script&lt;/a&gt; was coded in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://www.pygame.org"&gt;Pygame&lt;/a&gt;. To run in the web browser, the script was compiled to JavaScript with &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt; and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="400" id="app-container-brownian"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appScriptLauncher('brownian')"&gt;
    &lt;div id="app-title"&gt;Brownian Motion&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
&lt;p&gt;The app was compiled to JavaScript from a &lt;a class="reference external" href="https://gatc.ca/projects/brownian-motion/"&gt;script&lt;/a&gt; coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl&lt;/a&gt; module.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;lmouse/touch to activate particle trace&lt;/div&gt;
&lt;div class="line"&gt;key-p/swipe-down to add particle&lt;/div&gt;
&lt;div class="line"&gt;key-i/swipe-up for info&lt;/div&gt;
&lt;div class="line"&gt;key-r/swipe-right to reset&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="Biology, Programming"/><category term="html5 canvas"/><category term="javascript"/><category term="pyjsdl"/><category term="pyjsdl-ts"/><category term="transcrypt"/></entry><entry><title>Biomorph Evolve App</title><link href="https://gatc.ca/biomorph-evolve-app/" rel="alternate"/><published>2021-12-12T01:03:00-05:00</published><updated>2021-12-12T01:03:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2021-12-12:/biomorph-evolve-app/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/biomorph-evolve/"&gt;Biomorph Evolve&lt;/a&gt; is a computer simulation of biomorph evolution. A biomorph is a form that resembles a living organism. The simulation derives altered biomorph morphology due to an evolutionary process. The program is an implementation of &lt;a class="reference external" href="https://richarddawkins.net/"&gt;Richard Dawkins&lt;/a&gt;' Blind Watchmaker algorithm discussed in his book &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Blind_Watchmaker"&gt;The Blind Watchmaker&lt;/a&gt; and his â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/biomorph-evolve/"&gt;Biomorph Evolve&lt;/a&gt; is a computer simulation of biomorph evolution. A biomorph is a form that resembles a living organism. The simulation derives altered biomorph morphology due to an evolutionary process. The program is an implementation of &lt;a class="reference external" href="https://richarddawkins.net/"&gt;Richard Dawkins&lt;/a&gt;' Blind Watchmaker algorithm discussed in his book &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Blind_Watchmaker"&gt;The Blind Watchmaker&lt;/a&gt; and his article &lt;a class="reference external" href="https://www.richarddawkins.net/wp-content/uploads/sites/41/2014/06/Evolution-of-Evolvability.pdf"&gt;The Evolution of Evolvability in Artificial Life&lt;/a&gt;. The biomorph morphology is under control of a number of genes and undergo random mutation to derive altered biomorph progeny.&lt;/p&gt;
&lt;p&gt;In nature evolution is controlled by natural selection, whereas this program is an evolutionary process through artificial selection. The simulation initiates with a group of biomorphs each with a random generated genome. Selection of one of the biomorphs to use as parental form proceeds to the next generation whereby the selected biomorph is placed in the center grid surrounded by mutant progeny biomorphs. Through continuous selection endless forms may be evolved.&lt;/p&gt;
&lt;p&gt;Biomorph Evolve was programmed in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://www.pygame.org"&gt;Pygame&lt;/a&gt; and compiled to JavaScript with &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt; and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl&lt;/a&gt; library to an online deployable app. Controls are lmouse/touch for selection and key-r/touch-swipe for reset.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="480" data-height="480" id="app-container-biomorph-evolve"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appScriptLauncher('biomorph-evolve')"&gt;
    &lt;div id="app-title"&gt;Biomorph Evolve&lt;/div&gt;
&lt;/div&gt;</content><category term="Artificial Life, Biology, Programming"/><category term="alife"/><category term="pyjsdl"/><category term="pyjsdl-ts"/><category term="transcrypt"/></entry><entry><title>Usage of Pyjsdl with Transcrypt</title><link href="https://gatc.ca/usage-of-pyjsdl-with-transcrypt/" rel="alternate"/><published>2021-12-05T02:26:00-05:00</published><updated>2021-12-05T02:26:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2021-12-05:/usage-of-pyjsdl-with-transcrypt/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl&lt;/a&gt; library in the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; package is a port of &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; to work with &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt;. Pyjsdl permit scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript for online deployment. Pyjsdl is modelled on the Pygame commands that wraps JavaScript API providing the multimedia functionality. The post describes the process â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl&lt;/a&gt; library in the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; package is a port of &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; to work with &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt;. Pyjsdl permit scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript for online deployment. Pyjsdl is modelled on the Pygame commands that wraps JavaScript API providing the multimedia functionality. The post describes the process to convert the &lt;a class="reference external" href="https://gatc.ca/projects/draw-pad/"&gt;Draw Pad&lt;/a&gt; script to an app for online deployment.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class='jsapp' id='app-draw-pad' style='width:31.25em';&gt;
    &lt;div id='__panel__'&gt;&lt;/div&gt;
    &lt;script type='module' src='/apps/pyjsdl-ts/draw-pad-post-app/__target__/run_app.js'&gt;&lt;/script&gt;
    &lt;script src='/apps/pyjsdl-ts/draw-pad-post-app/lib/prism.js'&gt;&lt;/script&gt;
    &lt;link href='/apps/pyjsdl-ts/draw-pad-post-app/lib/prism.css' rel='stylesheet' /&gt;
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;br /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The Draw Pad app was compiled to JavaScript with Transcrypt, the Python code of the script is in the textbox. The textbox was also coded in Python and converted to JavaScript with Transcrypt and uses the &lt;a class="reference external" href="https://prismjs.com/"&gt;Prism&lt;/a&gt; JavaScript library syntax highlighter.&lt;/p&gt;
&lt;p&gt;For development the following tools are required. Python&amp;nbsp;3 is required, while Pygame is optional for running on the desktop. The Pyjsdl-ts package must be &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;downloaded&lt;/a&gt; and the pyjsdl folder placed in the script's folder or on its path. Pyjsdl is coded in Python and will be converted to JavaScript during the compile process. The final requirement is &lt;a class="reference external" href="https://www.transcrypt.org/docs/html/installation_use.html"&gt;Transcrypt installation&lt;/a&gt;. Transcrypt is a Python-to-JavaScript compiler/transpiler and can be installed with the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;transcrypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It may be preferable to install in a virtual environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;venv&lt;span class="w"&gt; &lt;/span&gt;env
&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;env/bin/activate
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;--upgrade&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;setuptools&lt;span class="w"&gt; &lt;/span&gt;wheel
pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;transcrypt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When developing with Transcrypt in the virtual environment, use the following command in the folder the environment was set to initiate the environment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;env/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script can be developed under Python/Pygame. Once the script is working properly, some code changes are necessary to function with Pyjsdl. Pyjsdl has a substantial portion of Pygame functionality using a similar &lt;a class="reference external" href="https://gatc.ca/docs/pyjsdl-ts"&gt;API&lt;/a&gt;. If you prefer to continue with desktop execution, the code can be tested with &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt; that is the original library from which Pyjsdl was ported and has similar functionality. The Drawing Pad was initially developed with Python/Pygame and checked with Jython/PyJ2D.&lt;/p&gt;
&lt;p&gt;Code changes are necessary due to functionality differences in either Pyjsdl, Transcrypt, or the web browser. Much of this content applies to conventional JavaScript applications, which is the goal even though we program with Python and Pyjsdl. To expose Pyjsdl API to the script, the library is imported:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyjsdl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The design intention of Pyjsdl was the replacement of Pygame functionality in the web browser so to permit Python/Pygame programs to be deployed online. Such an import would not permit the program to be developed and run under Pygame. Due to similarity of the API of Pygame and Pyjsdl, to allow the program to interoperate between the two environments the usual mechanism is to rebind the imports with a common name, thereby maintain functionality of the API statements. With this goal, the import statement that rebinds Pygame, for instance 'pg' that is usual for Pygame programs would be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pygame&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;should be changed to import Pyjsdl to replace Pygame by rebinding to the common name:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyjsdl&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The Draw Pad script is coded to permit it to execute either on the desktop or in the web browser. To do so, it uses conditional import statements that will import the correct library under various environments. In this manner it not only opens up the possibility of online deployment but maintains its ability to be developed and executed on the desktop.&lt;/p&gt;
&lt;p&gt;The other crucial change is the script's main loop. Since the JavaScript environment of web browsers are single threaded, any loop of long duration will freeze the app. Typically, JavaScript programs use callback functions for iteration. Since Python code does not wait at a particular statement, code changes are necessary. The crucial concern is the main program loop that iterates the execution of the app frames, for instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;needs to be replaced with the Pyjsdl equivalence, using its 'pyjsdl.setup' function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The 'pyjsdl.setup' statement provides Pyjsdl with a callback, in this case the 'run' function, to execute repeatedly after each frame is displayed. The display is updated repeatedly by the web browser through a display refresh callback function, typically 60 fps dependant on processing load. The callback function provided by the 'pyjsdl.setup' statement hooks into this iteration. The 'pyjsdl.setup' function is unique to Pyjsdl API not present in Pygame, therefore to permit the program to operate under the different environment it requires to be under conditional execution. With Draw Pad, the conditional import of Pyjsdl or Pygame is registered in a variable 'platform', which can be used for conditional execution. By examining Draw Pad code, with conditional import and rebinding to 'pg', there is a conditional execution dependent on platform either the main 'while' loop or 'pg.setup'. Registering a variable such as 'platform' is advisable if there are any other statements that requires conditional execution due to differences in the operating environment.&lt;/p&gt;
&lt;p&gt;Another concern is image load at which the Python script expects the loading process to occur immediately before processing the next statement, while the web browser requires to retrieve the image file from a server and cannot wait as this would lock the app execution. To overcome this obstacle, the image download is performed asynchronously using an internal callback. This is achieved used a preloading of the images prior to the main callback being executed, using the statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/brush.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The statement's second argument is a list of images to preload. With this accomplished, subsequent 'image.load' methods in the script will retrieve the image resident in memory. Pyjsdl requires the display to be initiated prior to preloading images, which probably should be revised. Therefore call 'display.set_mode' method prior to running the 'pyjsdl.setup' requiring image preloading. To pass variables to callback functions use global variables, for instance, the 'display' variable returned from 'display.set_mode' should be set as 'global display' in the function and there should be 'display=None' in the global scope.&lt;/p&gt;
&lt;p&gt;Another option for the 'pyjsdl.setup' statement is that it can be chained and passed new callback functions. It may be appropriate to use the 'pyjsdl.set_callback' if just changing callback. Passing new callbacks will change the callback hooked into the web browser iteration. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;prg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pre_run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pre_run&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;An alternative option for 'pyjsdl.setup' to avoid use of global variables is to pass an object with a 'run' method as done with Draw Pad, the 'run' method will be used as the callback. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;prg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This covers the crucial code changes. There may be a few other code changes necessary due to the nature of the web browser. For instance time.wait will not function as it would also lock the app execution, use a variable to check the pause state, change the main callback with 'pyjsdl.setup', or use time.set_timeout with a callback function for the web browser to schedule.&lt;/p&gt;
&lt;p&gt;The final concern is to compile Python to JavaScript. Transcrypt compiles Python&amp;nbsp;3 syntax. It compiles Python code to clean, concise, and efficient JavaScript code. At this stage of development the web browser is used for testing. The web browser's development console will provide messages, Transcrypt outputs print statements and exception errors to the console. To ensure code changes are reflected in the JavaScript code, development console settings have an option to disable cache when open.&lt;/p&gt;
&lt;p&gt;Transcrypt translates with a close coupling of Python objects to equivalent JavaScript objects, for instance internally a Python list is translated to a JavaScript array with a thin layer to provide Python functionality. For efficiency, some of the JavaScript restrictions are apparent. Browse the Transcrypt &lt;a class="reference external" href="https://www.transcrypt.org/documentation/"&gt;documentation&lt;/a&gt; for detail information. For instance, you cannot iterate through a Python dict as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would requiring continuous checking and calling Python special methods at the expense of efficiency. Rather Transcrypt requires the code change to an explicit statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another such difference are Python object truth value statements. For instance Python return False for an empty lists:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For efficiency, Transcrypt requires an explicit statement in such cases:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Transcrypt provides mechanisms to have these functionality at the expense of performance and size of the generated JavaScript code. Transcrypt compile program has command-line options to offer these functionality, but these compilation switches have impact on the performance of the whole program. For instance -i will permit implicit dictionary iteration. These command-line options are discouraged due to impact on performance. A preferable route is to use Transcrypt's pragma mechanism to locally provide the functionality required:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __pragma__ (&amp;#39;iconv&amp;#39;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adict&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c1"&gt;# __pragma__ (&amp;#39;noiconv&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For development you can use a number of initial pragma statements at the start of the script and then eliminate with alternative code statements or restrict pragma to a limited number of statements that will not impact the performance of the entire program.&lt;/p&gt;
&lt;p&gt;Draw Pad uses limited pragma statements, for instance rather than using a pragma the change to adict.keys in iteration statements is sufficient. Pragma statements have various forms, refer to Transcrypt &lt;a class="reference external" href="https://www.transcrypt.org/documentation/"&gt;documentation&lt;/a&gt;. In my opinion the preferable form is '# __pragma__' that permits pragma statements that are recognized by Transcrypt but does not affect the script execution with Python as it is in syntax a comment statement. Draw Pad script uses a single pragma statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __pragma__ (&amp;#39;skip&amp;#39;)&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;statements&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# __pragma__ (&amp;#39;noskip&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This pragma statement instructs Transcrypt to skip the intervening code. Referring to Draw Pad code, the import statements provide imports for the various environments: desktop, JVM, or JavaScript. Transcrypt process the import mechanism at compile time and the missing libraries will lead to compilation errors. The import of pyjsdl in the intervening skip pragma statements is for the former &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; library. Using this pragma statement, these import statements are ignored, and the variable 'platform' remains 'None', at which point Transcrypt will process the import of pyjsdl from the Pyjsdl-ts package.&lt;/p&gt;
&lt;p&gt;This covers much of the intricacies with using Pyjsdl. The remaining step is Transcrypt compilation of the Python script to JavaScript:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;transcrypt&lt;span class="w"&gt; &lt;/span&gt;-n&lt;span class="w"&gt; &lt;/span&gt;draw_pad.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The -n option is to avoid JavaScript minification, which requires JVM installed and only necessary when online deployment in a production setting. If the compile step passes, the JavaScript code can be executed. By default, Transcrypt compiles the Python script to JavaScript in the __target__ folder. The folder contains the JavaScript files for the script along with the imports, including the pyjsdl library that is predominately coded in Python and therefore is compiled, and Transcrypt core. The __target__ folder along with media file folder is all that is required to deploy online, besides a main HTML file to retrieve the JavaScript app, for instance Drawing Pad has draw_pad.html in the root folder of the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;background-color:black&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__panel__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;module&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;__target__/draw_pad.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The important statements are the '&amp;lt;script&amp;gt;' with 'src' set to the location of the main app JavaScript file, in this case to 'draw_pad.js', and the '&amp;lt;div id=&amp;quot;__panel__&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;' in which Pyjsdl inserts the canvas display.&lt;/p&gt;
&lt;p&gt;At this point the JavaScript app can run in the web browser. To run, it must be launched by the web browser from a web server. You can launch the app from a local server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;http.server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the web browser, browser to localhost:8000 or the local IP, then launch the app form the main HTML file. Use the local server for development, if changes are required, edit the Python script and rerun the transcrypt command to reflect changes in the JavaScript code.&lt;/p&gt;
&lt;p&gt;After development, the app can be uploaded to a web server for online deployment. To embed the app into a web page, the following HTML statement is added at the desired placement, for instance with Draw Pad:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;draw-pad&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;position:relative; left:50px;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://&amp;lt;server_path&amp;gt;/draw_pad.html&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;marginwidth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;marginheight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;hspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;vspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;
        &lt;span class="na"&gt;scrolling&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;no&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;500&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;400&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;frameborder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;iframe&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The app is now deployed online.&lt;/p&gt;
</content><category term="Programming"/><category term="javascript"/><category term="pygame"/><category term="pyjsdl"/><category term="pyjsdl-ts"/><category term="python"/><category term="transcrypt"/></entry><entry><title>Transcrypt Port of Pyjsdl</title><link href="https://gatc.ca/transcrypt-port-of-pyjsdl/" rel="alternate"/><published>2021-12-01T12:22:00-05:00</published><updated>2021-12-01T12:22:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2021-12-01:/transcrypt-port-of-pyjsdl/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; library permits scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript using the &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt; Python-to-JavaScript compiler. It is coded in Python that wraps JavaScript API for online deployment of web browser applications. The library is a port of &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; for Transcrypt that compiles Python 3 code to â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; library permits scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript using the &lt;a class="reference external" href="https://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt; Python-to-JavaScript compiler. It is coded in Python that wraps JavaScript API for online deployment of web browser applications. The library is a port of &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; for Transcrypt that compiles Python 3 code to efficient JavaScript. The library is available on the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; project page and used to compile the following &lt;a class="reference external" href="https://gatc.ca/files/pyjsdl-ts-demo.zip"&gt;demo&lt;/a&gt;.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="300" id="app-container-serpentduel"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appScriptLauncher('serpentduel')"&gt;
    &lt;div id="app-title"&gt;Pyjsdl Demo&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
The demo was compiled to JavaScript from a &lt;a class="reference external" href="https://gatc.ca/files/pyjsdl-ts-demo.zip"&gt;script&lt;/a&gt; coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; programming language and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl-ts/"&gt;Pyjsdl-ts&lt;/a&gt; module.&lt;/div&gt;
</content><category term="Programming"/><category term="javascript"/><category term="pygame"/><category term="pyjsdl"/><category term="pyjsdl-ts"/><category term="python"/><category term="transcrypt"/></entry><entry><title>Interphase: Cross-platform GUI Module</title><link href="https://gatc.ca/interphase-cross-platform-gui-module/" rel="alternate"/><published>2015-08-02T13:48:00-04:00</published><updated>2015-08-02T13:48:00-04:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2015-08-02:/interphase-cross-platform-gui-module/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/interphase/"&gt;Interphase&lt;/a&gt; is a &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; module designed to provide a graphics user interface (GUI) to &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; applications. Two of my other projects provide Pygame functionality to additional platforms, including &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt; for the Java environment and &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; for the JavaScript environment. Since a dependency of Interphase is Pygame, the module is compatible â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/interphase/"&gt;Interphase&lt;/a&gt; is a &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; module designed to provide a graphics user interface (GUI) to &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; applications. Two of my other projects provide Pygame functionality to additional platforms, including &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt; for the Java environment and &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; for the JavaScript environment. Since a dependency of Interphase is Pygame, the module is compatible with the PyJ2D and Pyjsdl libraries, permitting the programming of cross-platform applications with GUI interface coded with Interphase.&lt;/p&gt;
&lt;p&gt;This Python &lt;a class="reference external" href="https://gatc.ca/files/interphase-demo.zip"&gt;script&lt;/a&gt; demonstrates the cross-platform functionality of the Interphase module, the script can be examined to observe the minimal changes required for compatibility. Instructions to run the demo is in a text file included with the script. The script can run on the desktop with &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt;, on the &lt;a class="reference external" href="https://www.java.com/"&gt;JVM&lt;/a&gt; platform with &lt;a class="reference external" href="https://www.jython.org/"&gt;Jython&lt;/a&gt; and &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt;, and in the Web browser with &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compilation and &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt;. The following app was compiled from the demo script:&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="320" id="app-container-interphase-demo"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('interphase-demo')"&gt;
    &lt;div id="app-title"&gt;Interphase Demo&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
The app was compiled to JavaScript from a &lt;a class="reference external" href="https://gatc.ca/files/interphase-demo.zip"&gt;script&lt;/a&gt; coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; programming language and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; module.&lt;/div&gt;
</content><category term="Programming"/><category term="jython"/><category term="pygame"/><category term="pyjs"/><category term="pyjsdl"/><category term="python"/></entry><entry><title>Guide to Pyjs and Pyjsdl</title><link href="https://gatc.ca/guide-to-pyjs-and-pyjsdl/" rel="alternate"/><published>2014-11-16T03:35:00-05:00</published><updated>2014-11-16T03:35:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2014-11-16:/guide-to-pyjs-and-pyjsdl/</id><summary type="html">&lt;p&gt;These notes provide instructions on the use of &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs&lt;/a&gt; with &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt;, which were tested on Linux and Win7 systems.&lt;/p&gt;</summary><content type="html">&lt;p&gt;These notes provide instructions on the use of &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs&lt;/a&gt; with &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt;, which were tested on Linux and Win7 systems.&lt;/p&gt;
&lt;p&gt;Installation of Pyjs 0.8.1-dev is required, currently available from &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs Github repository&lt;/a&gt;. Check &lt;a class="reference external" href="https://github.com/pyjs/pyjs/wiki/GettingStarted"&gt;instruction&lt;/a&gt; on Pyjs Github site.&lt;/p&gt;
&lt;p&gt;The tools required for installation are &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; and &lt;a class="reference external" href="https://git-scm.com"&gt;git&lt;/a&gt;, install tools if necessary from package manager (Linux) or follow install instructions on tools Webpage (Win7).
Linux:
sudo apt-get install python-pip
sudo apt-get install git&lt;/p&gt;
&lt;p&gt;Command to install Pyjs with pip:
Linux system install:
sudo pip install git+https://github.com/pyjs/pyjs.git#egg=pyjs
Linux local install:
pip install git+https://github.com/pyjs/pyjs.git#egg=pyjs --user
Win7:
pip install git+https://github.com/pyjs/pyjs.git#egg=pyjs&lt;/p&gt;
&lt;p&gt;With Pyjs installed, pyjsbuild had error 'pkg_resources.DistributionNotFound: six', resolved after Pyjs install by upgrading &lt;a class="reference external" href="https://pypi.python.org/pypi/six"&gt;Six&lt;/a&gt; dependency:
pip show six (upgrade version 1.3 to 1.8)
Linux:
sudo pip install six --upgrade
Win7:
easy_install --upgrade six&lt;/p&gt;
&lt;p&gt;Command to show information of Pyjs installed by pip:
pip show pyjs
&amp;gt;
Linux information:
Location: /local/lib/python2.7/site-packages/
Win7 information:
Location: \python27\lib\site-packages&lt;/p&gt;
&lt;p&gt;Location of pyjsbuild and pyjscompressor:
Linux:
/local/bin/
Win7:
\python27\scripts
Refer to these scripts with system path, instances below are in Linux.&lt;/p&gt;
&lt;p&gt;To get HTML5 Canvas to work with IE9+, modify Pyjs as described in pyjsdl/guide.txt:
Use files in pyjs_changes.zip/git-140806 to modify or overwrite the following files:
Linux change:
/local/lib/python2.7/site-packages/pyjs/browser.py
/local/lib/python2.7/site-packages/pyjs/boilerplate/home.nocache.html
Win7 change:
\python27\lib\site-packages\pyjs\browser.py
\python27\lib\site-packages\pyjs\boilerplate\home.nocache.html&lt;/p&gt;
&lt;p&gt;Use pyjsbuild to compile, check 'pyjsbuild --help' for command options. Use compile options -S (strict mode), -O (optimise mode), and -d (debug). Use of --dynamic-link option links JavaScript files in lib folder, decreasing size of browser specific HTML files and permitting shared lib folder with multiple demo apps. Use the -o option to build to separate output folder for different option set. To test installed Pyjs, compile an app from Pyjs examples, which can be downloaded from &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs Github repository&lt;/a&gt;. Not all examples work, but tested the following:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/apps/pyjs_demo/Hello.html"&gt;Helloworld App&lt;/a&gt;
change to folder /examples/helloworld
/local/bin/pyjsbuild -S Hello.py --dynamic-link -o output&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/apps/pyjs_demo/GWTCanvasDemo.html"&gt;GWTCanvas App&lt;/a&gt;
change to folder /examples/gwtcanvas
/local/bin/pyjsbuild -S GWTCanvasDemo.py --dynamic-link -o output&lt;/p&gt;
&lt;p&gt;Compile a Pyjsdl demo with Pyjs and Pyjsdl, download &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;demo app&lt;/a&gt; and unpack. Download &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; and unpack, placing Pyjsdl folder in the demo app folder. Compile the script with the command:
/local/bin/pyjsbuild -O serpentduel.py --dynamic-link -o output
Following build, place data folder containing images in output folder.
Tested by opening app.html in Firefox, IE, and Chrome.
To open local files, launch Chrome with the &lt;a class="reference external" href="https://www.chromium.org/developers/how-tos/run-chromium-with-flags"&gt;option&lt;/a&gt; --allow-file-access-from-files
Can use a local server, such as &lt;a class="reference external" href="https://docs.python.org/2/library/simplehttpserver.html"&gt;SimpleHTTPServer&lt;/a&gt; with command:
python -m SimpleHTTPServer 8000
Server root folder is where command was run, use browser at &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; to browse to HTML file to load.&lt;/p&gt;
&lt;p&gt;Use pyjscompressor to compress JavaScript in output folder with command:
python /local/bin/pyjscompressor output
Pyjscompressor uses &lt;a class="reference external" href="https://code.google.com/p/closure-compiler/"&gt;Closure Compiler&lt;/a&gt;, can download latest release and use:
python /local/bin/pyjscompressor output -c compiler.jar
Pyjscompressor did not work in Pyjs build 140806, with 'ImportError: No module named contrib.pyjscompressor', due to missing files apparently left out during installation. Resolved by downloading Pyjs from &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs Github repository&lt;/a&gt;, and copy missing files from /pyjs/contrib/ to /local/lib/python2.7/site-packages/pyjs/contrib/ (Linux) or \python27\lib\site-packages\pyjs\contrib\ (Win7).&lt;/p&gt;
&lt;p&gt;Following compilation with pyjsbuild and optional compression with pyjscompressor, the output folder containing the app can be deployed to a Web server.&lt;/p&gt;
</content><category term="Programming"/><category term="html5 canvas"/><category term="javascript"/><category term="pygame"/><category term="pyjs"/><category term="pyjsdl"/><category term="python"/></entry><entry><title>Pyjsdl Demo Apps</title><link href="https://gatc.ca/pyjsdl-demo-apps/" rel="alternate"/><published>2014-11-11T14:56:00-05:00</published><updated>2014-11-11T14:56:00-05:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2014-11-11:/pyjsdl-demo-apps/</id><summary type="html">&lt;p&gt;The apps on this page were coded in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://www.pygame.org/"&gt;Pygame&lt;/a&gt;. They were derived from the &lt;a class="reference external" href="https://www.pygame.org/docs/ref/examples.html"&gt;Pygame examples&lt;/a&gt; included in Pygame distribution. The first app is the Chimp example that is also used in a Pygame &lt;a class="reference external" href="https://www.pygame.org/docs/tut/chimp/ChimpLineByLine.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The apps on this page were coded in &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; and &lt;a class="reference external" href="https://www.pygame.org/"&gt;Pygame&lt;/a&gt;. They were derived from the &lt;a class="reference external" href="https://www.pygame.org/docs/ref/examples.html"&gt;Pygame examples&lt;/a&gt; included in Pygame distribution. The first app is the Chimp example that is also used in a Pygame &lt;a class="reference external" href="https://www.pygame.org/docs/tut/chimp/ChimpLineByLine.html"&gt;tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="468" data-height="60" id="app-container-chimp"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('chimp')"&gt;
    &lt;div id="app-title"&gt;Chimp&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The next app is derived from the Aliens script included with the Pygame examples in Pygame distribution.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="540" data-height="480" id="app-container-aliens"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('aliens')"&gt;
    &lt;div id="app-title"&gt;Aliens&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The final app is derived from the Stars script also included with the Pygame examples in Pygame distribution.&lt;/p&gt;
&lt;div class="jsapp-box" data-width="480" data-height="480" id="app-container-stars"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('stars')"&gt;
    &lt;div id="app-title"&gt;Stars&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The Pygame examples were deployed as JavaScript apps using the &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compiler and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; library. Minor modification of the script is required, a &lt;a class="reference external" href="https://gatc.ca/files/demo-pack.zip"&gt;demo pack&lt;/a&gt; of the modified scripts for these Pygame examples can be downloaded to demonstrate the changes required.&lt;/p&gt;
&lt;p&gt;PyJ2D and Pyjsdl libraries were developed with the goal to provide enhanced deployment methods for Pygame apps. The libraries replace Pygame functionality in target environments, PyJ2D for the Java environment and Pyjsdl for the JavaScript environment. The demo pack includes modified Pygame examples for both these libraries.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt; was the pioneer project to run Pygame apps with &lt;a class="reference external" href="https://www.jython.org/"&gt;Jython&lt;/a&gt; in the &lt;a class="reference external" href="https://www.java.com/"&gt;Java VM&lt;/a&gt;. The script requires minor modifications to work with PyJ2D. Unsigned apps can run in earlier versions of the Java VM browser plugin, but security changes with the current version of the Java VM plugin the apps need to be officially signed, which makes this procedure less convenient. PyJ2D permits distribution as a single cross-platform package for systems with Java VM installed.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; permits compilation of the Pygame script using &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs&lt;/a&gt;. The Pygame script needs minor modifications to work with Pyjsdl, though a little more extensive compared with PyJ2D. Since Pyjsdl was developed from PyJ2D and share similar functionality, with greater ease in development with Jython than Pyjs that requires compilation and execution in the browser, it is easier to initially modify a Pygame script to function with PyJ2D prior to the additional modifications required for Pyjsdl. The modified scripts for these examples are provided to demonstrate the changes required, instructions to run the modified scripts are included in the demo pack. Check PyJ2D and Pyjsdl project pages for further information regarding the methods.&lt;/p&gt;
&lt;p&gt;Scripts modified to function with PyJ2D are included in the demo pack within the PyJ2D demo folder. To run the examples on a system with Java VM installed, &lt;a class="reference external" href="https://www.jython.org/download.html"&gt;download&lt;/a&gt; Jython installation package, or as a Jython standalone interpreter that can be placed on the path or within the script folder, the PyJ2D examples can use Jython 2.2.1 or later. Download &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt; and unpack on the path or within the script folder. To run the Chimp script, use the command 'java -jar jython.jar chimp.py', or if Jython was installed use the command 'jython chimp.py'. These modified example scripts can also run with Python2.7 and Pygame. A single script package with Jython and PyJ2D can be created to distribute on any systems with Java VM installed.&lt;/p&gt;
&lt;p&gt;Scripts modified to function with Pyjsdl are included in the demo pack within the Pyjsdl demo folder. To compile the example scripts, the Pyjs compiler needs to be installed from the &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs source&lt;/a&gt; on Github, follow installation instructions on the Pyjs Github site and on the Pyjsdl project page. Download &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; and unpacked on the path or within the script folder. Pyjs has two compilation modes, strict for closer adherence to Python, and optimise for minor restriction of certain Python constructs for increased performance. For the optimise mode, the script modified for strict mode requires additional modifications. The example scripts modified for these modes are included. To compile the Chimp script with Pyjs in strict mode, use the command '[pyjs folder]/pyjsbuild -S chimp-strict.py --dynamic-link -o outputdir1'. The example scripts modified for strict mode are able to also run with Python2.7 and Pygame. To compile the Chimp script with Pyjs in optimise mode, use the command '[pyjs folder]/pyjsbuild -O chimp.py --dynamic-link -o outputdir2'. The output folder has the JavaScript app, and can be tested locally from the main HTML file, then deployed to a server to run on the Web.&lt;/p&gt;
&lt;p&gt;Updated: 2021/04/30 - revised &lt;a class="reference external" href="https://gatc.ca/files/demo-pack.zip"&gt;demo pack&lt;/a&gt;&lt;/p&gt;
</content><category term="Programming"/><category term="html5 canvas"/><category term="java"/><category term="javascript"/><category term="jython"/><category term="pygame"/><category term="pyjs"/><category term="pyjsdl"/><category term="python"/></entry><entry><title>Compile Apps with Pyjs and Pyjsdl</title><link href="https://gatc.ca/compile-apps-with-pyjs-and-pyjsdl/" rel="alternate"/><published>2014-09-03T15:25:00-04:00</published><updated>2014-09-03T15:25:00-04:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2014-09-03:/compile-apps-with-pyjs-and-pyjsdl/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; implements &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; through JavaScript functionality permitting porting &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; apps to the Web browser as JavaScript/HTML5 apps via &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compilation. This post provides some additional details required to port the app, supplementing a previous &lt;a class="reference external" href="https://gatc.ca/deploy-javascript-application-using-pyjsdl/"&gt;post&lt;/a&gt;. The following app was deployed from Serpent Duel &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt;, and runs with Python â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; implements &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; through JavaScript functionality permitting porting &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; apps to the Web browser as JavaScript/HTML5 apps via &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compilation. This post provides some additional details required to port the app, supplementing a previous &lt;a class="reference external" href="https://gatc.ca/deploy-javascript-application-using-pyjsdl/"&gt;post&lt;/a&gt;. The following app was deployed from Serpent Duel &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt;, and runs with Python and Pygame, on &lt;a class="reference external" href="https://java.com/"&gt;JVM&lt;/a&gt; with &lt;a class="reference external" href="https://jython.org/"&gt;Jython&lt;/a&gt; and &lt;a class="reference external" href="https://gatc.ca/projects/pyj2d/"&gt;PyJ2D&lt;/a&gt;, and in the Web browser with Pyjs compilation and Pyjsdl.&lt;/p&gt;
&lt;p&gt;This JavaScript app was compiled with Pyjs and Pyjsdl:&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="300" id="app-container-serpentduel"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('serpentduel')"&gt;
    &lt;div id="app-title"&gt;Pyjsdl Demo&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
The app was compiled to JavaScript from a &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt; coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; programming language and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; module.&lt;/div&gt;
&lt;p&gt;Compilation of the script requires Pyjs installation, check the &lt;a class="reference external" href="https://github.com/pyjs/pyjs/wiki/GettingStarted"&gt;install instruction&lt;/a&gt; and guide.txt in Pyjsdl folder. Currently, the &lt;a class="reference external" href="https://github.com/pyjs/pyjs"&gt;Pyjs Git build&lt;/a&gt; is necessary and uses &lt;a class="reference external" href="https://pypi.python.org/pypi/pip"&gt;pip&lt;/a&gt; to install. Installation of Pyjs was straightforward, only problem encountered on my Linux setup was that the --upgrade flag was necessary on the pip install command due to an issue with the &lt;a class="reference external" href="https://pypi.python.org/pypi/six"&gt;Six&lt;/a&gt; library dependency probably due to an incompatible version. The Python script can be compiled with Pyjs using the command '[pyjs_path]/bin/pyjsbuild app.py --dynamic-link -o output' with option flags listed using -h option. Pyjs compilation has the -S flag for strict mode to provide the closest compatibility to Python, but for enhanced performance at the expense of compatibility compilation can be done with the -O flag for optimise mode.&lt;/p&gt;
&lt;p&gt;To compile, place Pyjsdl on the path of the app's folder. The script needs some modifications prior to compilation. To use Pyjsdl, edit the script's import statement as 'import pyjsdl as pygame' to replace Pygame. To run in the Web browser environment the app must conform to JavaScript constraints, in particular the app's main while loop operation would block browser update, resolved by revising the main while loop into a function and passing it as a callback function to the browser to call in time-triggered manner with statement pyjsdl.display.setup(function). Loading of images cannot operate as defined by the image load method of Pygame since the JavaScript cannot wait for image retrieval as this would also block browser update, so the images are preloaded by passing an images list to the setup method as pyjsdl.display.setup(function, images), and the pyjsdl.image.load method then access the preloaded images. A difficulty experienced with the current process is that any image access prior to calling the setup method will cause issues, and can be handled by chaining sequential calls to the pyjsdl.display.setup method passing various functions. Other script modifications that may be required are to address additional JavaScript environment specifics such as wait routines, to conform to Pyjs close compatibility with Python2.7, and handle any Pygame methods not implemented in &lt;a class="reference external" href="https://gatc.ca/docs/pyjsdl"&gt;Pyjsdl API&lt;/a&gt;. These modifications should permit compilation with Pyjs in strict mode.&lt;/p&gt;
&lt;p&gt;Compiling the script in Pyjs optimise mode will provide enhanced performance of a few folds, through lost of some Python compatibility that reduces the overhead of handling Python functionality not present in JavaScript. Most noticeable is lost of access to object's virtual attributes. For Pygame apps this is apparent with the Rect object that can be accessed through numerous virtual attributes, which is implemented in Pyjsdl and operates with Pyjs compilation in strict mode but lost in optimise mode, and JavaScript annoyingly registers such attribute access as undefined rather than raise an exception error. To overcome this problem such as Rect.center = (x_pos,y_pos) is to modify these statements to use the intrinsic Rect attributes (x, y, width, height) or call the object's special methods directly such as Rect.__setattr__('center', (x_pos,y_pos)). Developing a &lt;a class="reference external" href="https://gatc.ca/files/pyjsdl-app-convert_140903.zip"&gt;conversion script&lt;/a&gt; to do such changes to possibly automate some of the modifications necessary, warning the pattern-matching algorithm may have inaccuracies and requires manual verification before the change is permitted; for usage run script with -h option. There should be few such modifications necessary dependent on the app's code. These modifications should permit compilation with Pyjs in optimise mode.&lt;/p&gt;
&lt;p&gt;Pyjs compiles to an output folder, to which you should transfer any necessary resources such as image folder. The JavaScript can be tested in the Web browser from the local HTML file by opening the main HTML file in Firefox or Chrome (launch Chrome with --allow-file-access-from-files &lt;a class="reference external" href="https://www.chromium.org/developers/how-tos/run-chromium-with-flags"&gt;option&lt;/a&gt; to run local files). The JavaScript app can then be deployed on the Web page, for decreased load times the size of JavaScript app can be reduced with &lt;a class="reference external" href="https://developers.google.com/closure/compiler/"&gt;Closure Compiler&lt;/a&gt;. Further development is being directed to enhance the performance of Pyjsdl, such as use of object pools to minimize creation of new objects and code optimization to harness JavaScript JIT compiler. For further information on the use of Pyjsdl, check Pyjsdl &lt;a class="reference external" href="/projects/pyjsdl/resources/"&gt;resources page&lt;/a&gt;. If there is any issues regarding use of the module, suggestions for improvements, or to share links to information/tutorial/demo, send a message through comments, &lt;a class="reference external" href="/about/"&gt;direct messaging&lt;/a&gt;, or via &lt;a class="reference external" href="https://github.com/jggatc/pyjsdl"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Updated 2021/04/29 - revised Serpent Duel &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt;.&lt;/p&gt;
</content><category term="Programming"/><category term="html5 canvas"/><category term="javascript"/><category term="pygame"/><category term="pyjs"/><category term="pyjsdl"/><category term="python"/></entry><entry><title>Deploy JavaScript Application Using Pyjsdl</title><link href="https://gatc.ca/deploy-javascript-application-using-pyjsdl/" rel="alternate"/><published>2013-07-31T19:25:00-04:00</published><updated>2013-07-31T19:25:00-04:00</updated><author><name>JG</name></author><id>tag:gatc.ca,2013-07-31:/deploy-javascript-application-using-pyjsdl/</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; module is modelled on &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt;/&lt;a class="reference external" href="https://www.libsdl.org"&gt;SDL&lt;/a&gt; methods that wraps JavaScript functionality including HTML5 canvas. The module permits scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript using the &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compiler, allowing deployment of JavaScript applications without extensive editing of the script.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; module is modelled on &lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt;/&lt;a class="reference external" href="https://www.libsdl.org"&gt;SDL&lt;/a&gt; methods that wraps JavaScript functionality including HTML5 canvas. The module permits scripts coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt;/&lt;a class="reference external" href="https://pygame.org/"&gt;Pygame&lt;/a&gt; to compile to JavaScript using the &lt;a class="reference external" href="https://pyjs.org/"&gt;Pyjs&lt;/a&gt; compiler, allowing deployment of JavaScript applications without extensive editing of the script.&lt;/p&gt;
&lt;p&gt;The following JavaScript application was deployed using Pyjsdl:&lt;/p&gt;
&lt;div class="jsapp-box" data-width="400" data-height="300" id="app-container-serpentduel"&gt;
    &lt;input type="button" value="Launch" id="launch-button" onclick="appFrameLauncher('serpentduel')"&gt;
    &lt;div id="app-title"&gt;Pyjsdl Demo&lt;/div&gt;
&lt;/div&gt;&lt;div class="app-caption docutils container"&gt;
The demo was compiled to JavaScript from a &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt; coded in &lt;a class="reference external" href="https://python.org/"&gt;Python&lt;/a&gt; programming language and the &lt;a class="reference external" href="https://gatc.ca/projects/pyjsdl/"&gt;Pyjsdl&lt;/a&gt; module.&lt;/div&gt;
&lt;p&gt;For an example, &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;download&lt;/a&gt; the Python script used to compile this application, which was derived from the Serpent Duel program in &lt;a class="reference external" href="https://gatc.ca/projects/interphase-pack/"&gt;Interphase Pack&lt;/a&gt;. This post describes the steps required to deploy an application under the Linux environment, which should provide the fundamentals for other OS environments.&lt;/p&gt;
&lt;p&gt;To compile the script, &lt;a class="reference external" href="/projects/pyjsdl/#pyjsdl-download"&gt;download&lt;/a&gt; the Pyjsdl module and unpack into the script folder, or on the module path. A Python script requires some modification to work with Pyjsdl and to be compatible with the JavaScript. To import the Pyjsdl module, add the following statement to the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyjsdl&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pygame&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The statement imports the pyjsdl module and renames it pygame to maintain the validity of the Pygame statements. To adapt the script for browser compatibility, the following statement is necessary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pyjsdl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The statement takes a run argument and an optional images argument, which provides the browser with a 'run' function to execute and 'images' list to preload. The importance of this statement is due to the nature of Python scripts that usually execute repetitively from a loop statement in a main function, not possible in JavaScript since the browser is single-threaded and must have its own time to do browser routines such as display update and event processing, any continuous loop would lock the browser. Place commands to be repeated for program execution in a function, for instance 'run' function, and this function is passed to the browser to call repeatedly in a time-based manner. The preloading of images is preferred since the browser will not wait until images are downloaded, once images are retrieved the application proceeds.&lt;/p&gt;
&lt;p&gt;Other script changes required are for Pygame methods not supported by the Pyjsdl module, check the &lt;a class="reference external" href="https://gatc.ca/docs/pyjsdl"&gt;API documentation&lt;/a&gt;. Additional changes may be required in Python code to work with Pyjs depending on compilation mode, or code changes that are compatible to JavaScript language structure.&lt;/p&gt;
&lt;p&gt;To compile a Python script to JavaScript, setup a Pyjs development environment. Download Pyjs, the latest update is at &lt;a class="reference external" href="https://github.com/pyjs/pyjs/"&gt;Pyjs git repository&lt;/a&gt; and follow the installation instructions - to install &lt;a class="reference external" href="https://github.com/jggatc/pyjs/releases/"&gt;git build_13-06-12&lt;/a&gt;, unpack in a preferred folder and run 'python bootstrap.py'. Pyjs compiles JavaScript code with inclusion of browser-specific code, tests passed for the available Pyjs version with Pyjsdl to compile for the released version of Firefox, check txt file in the Pyjsdl folder for any changes that may be required for other browsers. Pyjsdl requires browsers with HTML5 canvas functionality that is supported by newer browsers. To get information on the JavaScript-compiled script, the browser needs some JavaScript tools such as browser console, check &lt;a class="reference external" href="https://pyjs.org/Developing.html"&gt;Pyjs developing information&lt;/a&gt; â€“ for instance for Firefox browser the plugins &lt;a class="reference external" href="https://addons.mozilla.org/en-US/firefox/addon/firebug/"&gt;Firebug&lt;/a&gt; and &lt;a class="reference external" href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/"&gt;Web Developer&lt;/a&gt; are useful. Another tool that can be used prior to Pyjs compilation is &lt;a class="reference external" href="https://pypi.python.org/pypi/pyflakes"&gt;Pyflakes&lt;/a&gt; that checks Python syntax.&lt;/p&gt;
&lt;p&gt;To compile script.py, enter the following in a command terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;pyjs&lt;span class="w"&gt; &lt;/span&gt;path&lt;span class="o"&gt;]&lt;/span&gt;/bin/pyjsbuild&lt;span class="w"&gt; &lt;/span&gt;script.py
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command will output compiled script. Pyjs can compile in different modes as described in &lt;a class="reference external" href="https://github.com/pyjs/pyjs/wiki/migrationguide"&gt;Pyjs guide&lt;/a&gt;, for instance debug mode (-d) provides Python error messages required in program development, strict mode (-S) compiles most Python syntax, and optimized mode (-O) compiles Python omitting some language constructs for smaller JavaScript code with increased performance. The optimized mode restricted Python recognition may require further changes to the script, so preferable to develop in strict mode, and make required changes for optimized mode at a later stage of development. Other useful compiling options are --enable-print-statements to enable console print output, -P that can provide list of browsers (for instance Mozilla) targeted by Pyjs, -o to choose compiling output folder, and --dynamic-link to separate Pyjs compilation of JavaScript from Html file. A couple of examples with debug -d option enabled:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyjsbuild&lt;span class="w"&gt; &lt;/span&gt;-S&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;script.py&lt;span class="w"&gt; &lt;/span&gt;-P&lt;span class="w"&gt; &lt;/span&gt;Mozilla
pyjsbuild&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;-d&lt;span class="w"&gt; &lt;/span&gt;script.py&lt;span class="w"&gt; &lt;/span&gt;--enable-print-statements&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;outputdir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pyjs compiles only code that it detects has been modified since last called, and noticed that if Pyjs compilation mode is changed, the compiled code in the output folder should be removed or choose a different output folder. The output folder will contain script.html that can be run in the browser. The script.html that is compiled runs without change in the Firefox browser.&lt;/p&gt;
&lt;p&gt;For site deployment, script.html may need some editing such as addition of the line at the beginning of the Html file required for some browsers, and possibly other html/style changes. For possible changes to script.html, examine the demo &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt; archive for changes made for its deployment. For deployment, my preference is to use the following compilation command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyjsbuild&lt;span class="w"&gt; &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;script.py&lt;span class="w"&gt; &lt;/span&gt;--dynamic-link
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The --dynamic-link option separates JavaScript files in the lib folder with links from the Html files, not only reducing the application size but also allowing for sharing of Pyjs/Pyjdl JavaScript files between multiple applications. For further reduction in size of the application, before deployment the JavaScript code can be compressed with &lt;a class="reference external" href="https://github.com/yui/yuicompressor/"&gt;YUI Compressor&lt;/a&gt; with the following command executed in output lib folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;yui-compressor&lt;span class="w"&gt; &lt;/span&gt;-o&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.js$:.js&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;*.js
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compressed JavaScript files will replace the original. The output folder containing Html files and linked JavaScript files in the lib folder, along with images folder containing any images, can be deployed online.&lt;/p&gt;
&lt;p&gt;For deployment of a Pyjsdl application on a website, the following Html code can be used:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pyjsdl_demo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;App: Pyjsdl Demo&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;jsapp_box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;button&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Launch&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;appLauncher(&amp;quot;pyjsdl_demo&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;app_title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Pyjsdl Demo&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This code asserts a placeholder for the application on the webpage, which is within a div section with id the application name pyjsdl_demo, with a button that calls the JavaScript function appLauncher with the application id argument to launch the application, edit this name to your application. The JavaScript function code follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appLauncher&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://website.com/apps/&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;pre&amp;gt;&amp;lt;iframe id=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; name=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; src=&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;appSource&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;/pre&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the JavaScript function appLauncher is called from a webpage, it replaces the webpage div having the given id with an iframe containing the Pyjsdl application, adapt to your application configuration. Place this JavaScript function in an accessible location on the website, such as the webpage header or with other JavaScript functions. Further details can be found in the txt file in demo &lt;a class="reference external" href="https://gatc.ca/files/serpentduel.zip"&gt;script&lt;/a&gt; archive. With this procedure, your Python script using the Pyjsdl module can be deployed as a JavaScript application.&lt;/p&gt;
</content><category term="Programming"/><category term="html5 canvas"/><category term="javascript"/><category term="pygame"/><category term="pyjs"/><category term="pyjsdl"/><category term="python"/></entry></feed>